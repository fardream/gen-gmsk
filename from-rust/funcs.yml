- name: new
  struct_name: Env
  comment: Create a new environment
- name: new_mem_debug
  struct_name: Env
  comment: Create a new environment, specifying an output file used for writing memory debugging information.
- name: task
  struct_name: Env
  comment: Create a new task in this environment
- name: task_with_capacity
  struct_name: Env
  comment: Create a new task in this environment with pre-defined capacities.
- name: handle_res
  struct_name: Env
  comment: ''
- name: axpy
  struct_name: Env
  comment: |-
    Computes vector addition and multiplication by a scalar.

    # Arguments

    - `n_` Length of the vectors.
    - `alpha_` The scalar that multiplies x.
    - `x_` The x vector.
    - `y_` The y vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.axpy>
- name: check_in_all
  struct_name: Env
  comment: |-
    Check in all unused license features to the license token server.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkinall>
- name: check_in_license
  struct_name: Env
  comment: |-
    Check in a license feature back to the license server ahead of time.

    # Arguments

    - `feature_` Feature to check in to the license system.

    See [Feature]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkinlicense>
- name: check_out_license
  struct_name: Env
  comment: |-
    Check out a license feature from the license server ahead of time.

    # Arguments

    - `feature_` Feature to check out from the license system.

    See [Feature]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkoutlicense>
- name: check_version
  struct_name: Env
  comment: |-
    Compares a version of the MOSEK DLL with a specified version.

    # Arguments

    - `major_` Major version number.
    - `minor_` Minor version number.
    - `revision_` Revision number.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkversion>
- name: compute_sparse_cholesky
  struct_name: Env
  comment: |-
    Computes a Cholesky factorization of sparse matrix.

    # Arguments

    - `numthreads_` The number threads that can be used to do the computation. 0 means the code makes the choice.
    - `ordermethod_` If nonzero, then a sparsity preserving ordering will be employed.
    - `tolsingular_` A positive parameter controlling when a pivot is declared zero.
    - `anzc_` anzc\[j\] is the number of nonzeros in the jth column of A.
    - `aptrc_` aptrc\[j\] is a pointer to the first element in column j.
    - `asubc_` Row indexes for each column stored in increasing order.
    - `avalc_` The value corresponding to row indexed stored in asubc.
    - `perm_` Permutation array used to specify the permutation matrix P computed by the function.
    - `diag_` The diagonal elements of matrix D.
    - `lnzc_` lnzc\[j\] is the number of non zero elements in column j.
    - `lptrc_` lptrc\[j\] is a pointer to the first row index and value in column j.
    - `lensubnval_` Number of elements in lsubc and lvalc.
    - `lsubc_` Row indexes for each column stored in increasing order.
    - `lvalc_` The values corresponding to row indexed stored in lsubc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.computesparsecholesky>
- name: dot
  struct_name: Env
  comment: |-
    Computes the inner product of two vectors.

    # Arguments

    - `n_` Length of the vectors.
    - `x_` The x vector.
    - `y_` The y vector.
    - `xty_` The result of the inner product.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.dot>
- name: echo_intro
  struct_name: Env
  comment: |-
    Prints an intro to message stream.

    # Arguments

    - `longver_` If non-zero, then the intro is slightly longer.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.echointro>
- name: enable_gar_col_env
  struct_name: Env
  comment: |-
    Enable reference counting for environments.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.enablegarcolenv>
- name: expirylicenses
  struct_name: Env
  comment: |-
    Reports when the first license feature expires.

    # Arguments

    - `expiry_` If nonnegative, then it is the minimum number days to expiry of any feature that has been checked out.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.expirylicenses>
- name: gemm
  struct_name: Env
  comment: |-
    Performs a dense matrix multiplication.

    # Arguments

    - `transa_` Indicates whether the matrix A must be transposed.

    See [Transpose]
    - `transb_` Indicates whether the matrix B must be transposed.

    See [Transpose]
    - `m_` Indicates the number of rows of matrix C.
    - `n_` Indicates the number of columns of matrix C.
    - `k_` Specifies the common dimension along which op(A) and op(B) are multiplied.
    - `alpha_` A scalar value multiplying the result of the matrix multiplication.
    - `a_` The pointer to the array storing matrix A in a column-major format.
    - `b_` The pointer to the array storing matrix B in a column-major format.
    - `beta_` A scalar value that multiplies C.
    - `c_` The pointer to the array storing matrix C in a column-major format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gemm>
- name: gemv
  struct_name: Env
  comment: |-
    Computes dense matrix times a dense vector product.

    # Arguments

    - `transa_` Indicates whether the matrix A must be transposed.

    See [Transpose]
    - `m_` Specifies the number of rows of the matrix A.
    - `n_` Specifies the number of columns of the matrix A.
    - `alpha_` A scalar value multiplying the matrix A.
    - `a_` A pointer to the array storing matrix A in a column-major format.
    - `x_` A pointer to the array storing the vector x.
    - `beta_` A scalar value multiplying the vector y.
    - `y_` A pointer to the array storing the vector y.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gemv>
- name: linkfiletostream
  struct_name: Env
  comment: |-
    Directs all output from a stream to a file.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `filename_` A valid file name.
    - `append_` If this argument is 0 the file will be overwritten, otherwise it will be appended to.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.linkfiletoenvstream>
- name: optimize_batch
  struct_name: Env
  comment: |-
    Optimize a number of tasks in parallel using a specified number of threads.

    # Arguments

    - `israce_` If nonzero, then the function is terminated after the first task has been completed.
    - `maxtime_` Time limit for the function.
    - `numthreads_` Number of threads to be employed.
    - `trmcode_` The termination code for each task.

    See [Rescode]
    - `rcode_` The response code for each task.

    See [Rescode]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.optimizebatch>
- name: potrf
  struct_name: Env
  comment: |-
    Computes a Cholesky factorization of a dense matrix.

    # Arguments

    - `uplo_` Indicates whether the upper or lower triangular part of the matrix is stored.

    See [Uplo]
    - `n_` Dimension of the symmetric matrix.
    - `a_` A symmetric matrix stored in column-major order.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.potrf>
- name: put_license_code
  struct_name: Env
  comment: |-
    Input a runtime license code.

    # Arguments

    - `code_` A license key string.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putlicensecode>
- name: put_license_debug
  struct_name: Env
  comment: |-
    Enables debug information for the license system.

    # Arguments

    - `licdebug_` Enable output of license check-out debug information.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putlicensedebug>
- name: put_license_path
  struct_name: Env
  comment: |-
    Set the path to the license file.

    # Arguments

    - `licensepath_` A path specifying where to search for the license.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putlicensepath>
- name: put_license_wait
  struct_name: Env
  comment: |-
    Control whether mosek should wait for an available license if no license is available.

    # Arguments

    - `licwait_` Enable waiting for a license.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putlicensewait>
- name: reset_expiry_licenses
  struct_name: Env
  comment: |-
    Reset the license expiry reporting startpoint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.resetexpirylicenses>
- name: sparse_triangular_solve_dense
  struct_name: Env
  comment: |-
    Solves a sparse triangular system of linear equations.

    # Arguments

    - `transposed_` Controls whether the solve is with L or the transposed L.

    See [Transpose]
    - `lnzc_` lnzc\[j\] is the number of nonzeros in column j.
    - `lptrc_` lptrc\[j\] is a pointer to the first row index and value in column j.
    - `lsubc_` Row indexes for each column stored sequentially.
    - `lvalc_` The value corresponding to row indexed stored lsubc.
    - `b_` The right-hand side of linear equation system to be solved as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.sparsetriangularsolvedense>
- name: syeig
  struct_name: Env
  comment: |-
    Computes all eigenvalues of a symmetric dense matrix.

    # Arguments

    - `uplo_` Indicates whether the upper or lower triangular part is used.

    See [Uplo]
    - `n_` Dimension of the symmetric input matrix.
    - `a_` Input matrix A.
    - `w_` Array of length at least n containing the eigenvalues of A.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.syeig>
- name: syevd
  struct_name: Env
  comment: |-
    Computes all the eigenvalues and eigenvectors of a symmetric dense matrix, and thus its eigenvalue decomposition.

    # Arguments

    - `uplo_` Indicates whether the upper or lower triangular part is used.

    See [Uplo]
    - `n_` Dimension of the symmetric input matrix.
    - `a_` Input matrix A.
    - `w_` Array of length at least n containing the eigenvalues of A.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.syevd>
- name: syrk
  struct_name: Env
  comment: |-
    Performs a rank-k update of a symmetric matrix.

    # Arguments

    - `uplo_` Indicates whether the upper or lower triangular part of C is used.

    See [Uplo]
    - `trans_` Indicates whether the matrix A must be transposed.

    See [Transpose]
    - `n_` Specifies the order of C.
    - `k_` Indicates the number of rows or columns of A, and its rank.
    - `alpha_` A scalar value multiplying the result of the matrix multiplication.
    - `a_` The pointer to the array storing matrix A in a column-major format.
    - `beta_` A scalar value that multiplies C.
    - `c_` The pointer to the array storing matrix C in a column-major format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.syrk>
- name: new
  struct_name: TaskCB
  comment: Create a new `TaskCB` object from a given `Task`.
- name: without_callbacks
  struct_name: TaskCB
  comment: Convert a `TaskCB` object into a `Task` object.
- name: clone
  struct_name: TaskCB
  comment: |-
    Clone a `TaskCB`. Since callbacks are not shaerd between
    cloned objects, this returns a plain `Task` object.
- name: put_stream_callback
  struct_name: TaskCB
  comment: |-
    Set a stream callback handler.

    # Arguments

    - `whichstream` defines which stream attach it to, use constants `MSK_STREAM_...`.
    - `func` is a function that receives a message to be printed.
- name: clear_stream_callback
  struct_name: TaskCB
  comment: Clear stream callback handler at a given stream.
- name: put_callback
  struct_name: TaskCB
  comment: |-
    Sets an information callback handler in the task

    # Arguments:

    - `func` A function (caller,dinf,iinf,liinf) -> bool, that
    returns false to indicate that the solver should terminate as
    soon as possible, otherwise returns true.
    - `caller` indicates what the solver is currently doing (see `MSK_CALLBACK_...` constants)
    - `dinf` is a list of f64 information items (indexed with `MSK_DINF_...`)
    - `iinf` is a list of i32 information items (indexed with `MSK_IINF_...`)
    - `liinf` is a list of i64 information items (indexed with `MSK_LIINF_...`)
- name: clear_callback
  struct_name: TaskCB
  comment: ''
- name: analyze_names
  struct_name: TaskCB
  comment: |-
    Analyze the names and issue an error for the first invalid name.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `nametype_` The type of names e.g. valid in MPS or LP files.

    See [Nametype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.analyzenames>
- name: analyze_problem
  struct_name: TaskCB
  comment: |-
    Analyze the data of a task.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.analyzeproblem>
- name: analyze_solution
  struct_name: TaskCB
  comment: |-
    Print information related to the quality of the solution.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.analyzesolution>
- name: append_acc
  struct_name: TaskCB
  comment: |-
    Appends an affine conic constraint to the task.

    # Arguments

    - `domidx_` Domain index.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendacc>
- name: append_accs
  struct_name: TaskCB
  comment: |-
    Appends a number of affine conic constraint to the task.

    # Arguments

    - `domidxs_` Domain indices.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendaccs>
- name: append_acc_seq
  struct_name: TaskCB
  comment: |-
    Appends an affine conic constraint to the task.

    # Arguments

    - `domidx_` Domain index.
    - `afeidxfirst_` Index of the first affine expression.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendaccseq>
- name: append_accs_seq
  struct_name: TaskCB
  comment: |-
    Appends a number of affine conic constraint to the task.

    # Arguments

    - `domidxs_` Domain indices.
    - `numafeidx_` Number of affine expressions in the affine expression list (must equal the sum of dimensions of the domains).
    - `afeidxfirst_` Index of the first affine expression.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendaccsseq>
- name: append_afes
  struct_name: TaskCB
  comment: |-
    Appends a number of empty affine expressions to the optimization task.

    # Arguments

    - `num_` Number of empty affine expressions which should be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendafes>
- name: append_barvars
  struct_name: TaskCB
  comment: |-
    Appends semidefinite variables to the problem.

    # Arguments

    - `dim_` Dimensions of symmetric matrix variables to be added.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendbarvars>
- name: append_cone
  struct_name: TaskCB
  comment: |-
    Appends a new conic constraint to the problem.

    # Arguments

    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `submem_` Variable subscripts of the members in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendcone>
- name: append_cone_seq
  struct_name: TaskCB
  comment: |-
    Appends a new conic constraint to the problem.

    # Arguments

    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `nummem_` Number of member variables in the cone.
    - `j_` Index of the first variable in the conic constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendconeseq>
- name: append_cones_seq
  struct_name: TaskCB
  comment: |-
    Appends multiple conic constraints to the problem.

    # Arguments

    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `nummem_` Numbers of member variables in the cones.
    - `j_` Index of the first variable in the first cone to be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendconesseq>
- name: append_cons
  struct_name: TaskCB
  comment: |-
    Appends a number of constraints to the optimization task.

    # Arguments

    - `num_` Number of constraints which should be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendcons>
- name: append_djcs
  struct_name: TaskCB
  comment: |-
    Appends a number of empty disjunctive constraints to the task.

    # Arguments

    - `num_` Number of empty disjunctive constraints which should be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appenddjcs>
- name: append_dual_exp_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the dual exponential cone domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appenddualexpconedomain>
- name: append_dual_geo_mean_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the dual geometric mean cone domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appenddualgeomeanconedomain>
- name: append_dual_power_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the dual power cone domain.

    # Arguments

    - `n_` Dimension of the domain.
    - `alpha_` The sequence proportional to exponents. Must be positive.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appenddualpowerconedomain>
- name: append_primal_exp_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the primal exponential cone domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendprimalexpconedomain>
- name: append_primal_geo_mean_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the primal geometric mean cone domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendprimalgeomeanconedomain>
- name: append_primal_power_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the primal power cone domain.

    # Arguments

    - `n_` Dimension of the domain.
    - `alpha_` The sequence proportional to exponents. Must be positive.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendprimalpowerconedomain>
- name: append_quadratic_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the n dimensional quadratic cone domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendquadraticconedomain>
- name: append_r_domain
  struct_name: TaskCB
  comment: |-
    Appends the n dimensional real number domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrdomain>
- name: append_rminus_domain
  struct_name: TaskCB
  comment: |-
    Appends the n dimensional negative orthant to the list of domains.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrminusdomain>
- name: append_rplus_domain
  struct_name: TaskCB
  comment: |-
    Appends the n dimensional positive orthant to the list of domains.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrplusdomain>
- name: append_r_quadratic_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the n dimensional rotated quadratic cone domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrquadraticconedomain>
- name: append_rzero_domain
  struct_name: TaskCB
  comment: |-
    Appends the n dimensional 0 domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrzerodomain>
- name: append_sparse_sym_mat
  struct_name: TaskCB
  comment: |-
    Appends a general sparse symmetric matrix to the storage of symmetric matrices.

    # Arguments

    - `dim_` Dimension of the symmetric matrix that is appended.
    - `subi_` Row subscript in the triplets.
    - `subj_` Column subscripts in the triplets.
    - `valij_` Values of each triplet.

    # Returns

    - `idx` Unique index assigned to the inputted matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendsparsesymmat>
- name: append_sparse_sym_mat_list
  struct_name: TaskCB
  comment: |-
    Appends a general sparse symmetric matrix to the storage of symmetric matrices.

    # Arguments

    - `dims_` Dimensions of the symmetric matrixes.
    - `nz_` Number of nonzeros for each matrix.
    - `subi_` Row subscript in the triplets.
    - `subj_` Column subscripts in the triplets.
    - `valij_` Values of each triplet.
    - `idx_` Unique index assigned to the inputted matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendsparsesymmatlist>
- name: append_svec_psd_cone_domain
  struct_name: TaskCB
  comment: |-
    Appends the vectorized SVEC PSD cone domain.

    # Arguments

    - `n_` Dimension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendsvecpsdconedomain>
- name: append_vars
  struct_name: TaskCB
  comment: |-
    Appends a number of variables to the optimization task.

    # Arguments

    - `num_` Number of variables which should be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendvars>
- name: async_get_log
  struct_name: TaskCB
  comment: |-
    Get the optimizer log from a remote job.

    # Arguments

    - `addr_` Address of the solver server
    - `accesstoken_` Access token string or NULL
    - `token_` Job token

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncgetlog>
- name: async_get_result
  struct_name: TaskCB
  comment: |-
    Request a solution from a remote job.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.
    - `token_` The task token.
    - `resp_` Is the response code from the remote solver.

    See [Rescode]
    - `trm_` Is either OK or a termination response code.

    See [Rescode]

    # Returns

    - `respavailable` Indicates if a remote response is available.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncgetresult>
- name: async_optimize
  struct_name: TaskCB
  comment: |-
    Offload the optimization task to a solver server in asynchronous mode.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.

    # Returns

    - `token` Returns the task token.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncoptimize>
- name: async_poll
  struct_name: TaskCB
  comment: |-
    Requests information about the status of the remote job.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.
    - `token_` The task token.
    - `resp_` Is the response code from the remote solver.

    See [Rescode]
    - `trm_` Is either OK or a termination response code.

    See [Rescode]

    # Returns

    - `respavailable` Indicates if a remote response is available.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncpoll>
- name: async_stop
  struct_name: TaskCB
  comment: |-
    Request that the job identified by the token is terminated.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.
    - `token_` The task token.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncstop>
- name: basis_cond
  struct_name: TaskCB
  comment: |-
    Computes conditioning information for the basis matrix.

    # Arguments

    - `nrmbasis_` An estimate for the 1-norm of the basis.
    - `nrminvbasis_` An estimate for the 1-norm of the inverse of the basis.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.basiscond>
- name: check_mem
  struct_name: TaskCB
  comment: |-
    Checks the memory allocated by the task.

    # Arguments

    - `file_` File from which the function is called.
    - `line_` Line in the file from which the function is called.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkmemtask>
- name: chg_con_bound
  struct_name: TaskCB
  comment: |-
    Changes the bounds for one constraint.

    # Arguments

    - `i_` Index of the constraint for which the bounds should be changed.
    - `lower_` If non-zero, then the lower bound is changed, otherwise the upper bound is changed.
    - `finite_` If non-zero, then the given value is assumed to be finite.
    - `value_` New value for the bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.chgconbound>
- name: chg_var_bound
  struct_name: TaskCB
  comment: |-
    Changes the bounds for one variable.

    # Arguments

    - `j_` Index of the variable for which the bounds should be changed.
    - `lower_` If non-zero, then the lower bound is changed, otherwise the upper bound is changed.
    - `finite_` If non-zero, then the given value is assumed to be finite.
    - `value_` New value for the bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.chgvarbound>
- name: commit_changes
  struct_name: TaskCB
  comment: |-
    Commits all cached problem changes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.commitchanges>
- name: delete_solution
  struct_name: TaskCB
  comment: |-
    Undefine a solution and free the memory it uses.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.deletesolution>
- name: dual_sensitivity
  struct_name: TaskCB
  comment: |-
    Performs sensitivity analysis on objective coefficients.

    # Arguments

    - `subj_` Indexes of objective coefficients to analyze.
    - `leftpricej_` Left shadow prices for requested coefficients.
    - `rightpricej_` Right shadow prices for requested coefficients.
    - `leftrangej_` Left range for requested coefficients.
    - `rightrangej_` Right range for requested coefficients.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.dualsensitivity>
- name: empty_afe_barf_row
  struct_name: TaskCB
  comment: |-
    Clears a row in barF

    # Arguments

    - `afeidx_` Row index of barF.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafebarfrow>
- name: empty_afe_barf_row_list
  struct_name: TaskCB
  comment: |-
    Clears rows in barF.

    # Arguments

    - `afeidxlist_` Indices of rows in barF to clear.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafebarfrowlist>
- name: empty_afe_f_col
  struct_name: TaskCB
  comment: |-
    Clears a column in F.

    # Arguments

    - `varidx_` Variable index.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafefcol>
- name: empty_afe_f_col_list
  struct_name: TaskCB
  comment: |-
    Clears columns in F.

    # Arguments

    - `varidx_` Indices of variables in F to clear.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafefcollist>
- name: empty_afe_f_row
  struct_name: TaskCB
  comment: |-
    Clears a row in F.

    # Arguments

    - `afeidx_` Row index.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafefrow>
- name: empty_afe_f_row_list
  struct_name: TaskCB
  comment: |-
    Clears rows in F.

    # Arguments

    - `afeidx_` Indices of rows in F to clear.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafefrowlist>
- name: evaluate_acc
  struct_name: TaskCB
  comment: |-
    Evaluates the activity of an affine conic constraint.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidx_` The index of the affine conic constraint.
    - `activity_` The activity of the affine conic constraint. The array should have length equal to the dimension of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.evaluateacc>
- name: evaluate_accs
  struct_name: TaskCB
  comment: |-
    Evaluates the activities of all affine conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `activity_` The activity of affine conic constraints. The array should have length equal to the sum of dimensions of all affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.evaluateaccs>
- name: generate_acc_names
  struct_name: TaskCB
  comment: |-
    Generates systematic names for affine conic constraints.

    # Arguments

    - `sub_` Indexes of the affine conic constraints.
    - `fmt_` The variable name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generateaccnames>
- name: generate_barvar_names
  struct_name: TaskCB
  comment: |-
    Generates systematic names for variables.

    # Arguments

    - `subj_` Indexes of the variables.
    - `fmt_` The variable name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generatebarvarnames>
- name: generate_cone_names
  struct_name: TaskCB
  comment: |-
    Generates systematic names for cone.

    # Arguments

    - `subk_` Indexes of the cone.
    - `fmt_` The cone name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generateconenames>
- name: generate_con_names
  struct_name: TaskCB
  comment: |-
    Generates systematic names for constraints.

    # Arguments

    - `subi_` Indexes of the constraints.
    - `fmt_` The constraint name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generateconnames>
- name: generate_djc_names
  struct_name: TaskCB
  comment: |-
    Generates systematic names for affine conic constraints.

    # Arguments

    - `sub_` Indexes of the disjunctive constraints.
    - `fmt_` The variable name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generatedjcnames>
- name: generate_var_names
  struct_name: TaskCB
  comment: |-
    Generates systematic names for variables.

    # Arguments

    - `subj_` Indexes of the variables.
    - `fmt_` The variable name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generatevarnames>
- name: get_acc_afe_idx_list
  struct_name: TaskCB
  comment: |-
    Obtains the list of affine expressions appearing in the affine conic constraint.

    # Arguments

    - `accidx_` Index of the affine conic constraint.
    - `afeidxlist_` List of indexes of affine expressions appearing in the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccafeidxlist>
- name: get_acc_b
  struct_name: TaskCB
  comment: |-
    Obtains the additional constant term vector appearing in the affine conic constraint.

    # Arguments

    - `accidx_` Index of the affine conic constraint.
    - `b_` The vector b appearing in the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccb>
- name: get_acc_barf_block_triplet
  struct_name: TaskCB
  comment: |-
    Obtains barF, implied by the ACCs, in block triplet form.

    # Arguments

    - `acc_afe_` Index of the AFE within the concatenated list of AFEs in ACCs.
    - `bar_var_` Symmetric matrix variable index.
    - `blk_row_` Block row index.
    - `blk_col_` Block column index.
    - `blk_val_` The numerical value associated with each block triplet.

    # Returns

    - `numtrip` Number of elements in the block triplet form.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccbarfblocktriplet>
- name: get_acc_barf_num_block_triplets
  struct_name: TaskCB
  comment: |-
    Obtains an upper bound on the number of elements in the block triplet form of barf, as used within the ACCs.

    # Returns

    - `numtrip` An upper bound on the number of elements in the block triplet form of barf, as used within the ACCs.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccbarfnumblocktriplets>
- name: get_acc_domain
  struct_name: TaskCB
  comment: |-
    Obtains the domain appearing in the affine conic constraint.

    # Arguments

    - `accidx_` The index of the affine conic constraint.

    # Returns

    - `domidx` The index of domain in the affine conic constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccdomain>
- name: get_acc_dot_y
  struct_name: TaskCB
  comment: |-
    Obtains the doty vector for an affine conic constraint.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidx_` The index of the affine conic constraint.
    - `doty_` The dual values for this affine conic constraint. The array should have length equal to the dimension of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccdoty>
- name: get_acc_dot_y_s
  struct_name: TaskCB
  comment: |-
    Obtains the doty vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `doty_` The dual values of affine conic constraints. The array should have length equal to the sum of dimensions of all affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccdotys>
- name: get_acc_f_numnz
  struct_name: TaskCB
  comment: |-
    Obtains the total number of nonzeros in the ACC implied F matrix.

    # Returns

    - `accfnnz` Number of nonzeros in the F matrix implied by ACCs.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccfnumnz>
- name: get_acc_f_trip
  struct_name: TaskCB
  comment: |-
    Obtains the F matrix (implied by the AFE ordering within the ACCs) in triplet format.

    # Arguments

    - `frow_` Row indices of nonzeros in the implied F matrix.
    - `fcol_` Column indices of nonzeros in the implied F matrix.
    - `fval_` Values of nonzero entries in the implied F matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccftrip>
- name: get_acc_g_vector
  struct_name: TaskCB
  comment: |-
    The g vector as used within the ACCs.

    # Arguments

    - `g_` The g vector as used within the ACCs.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccgvector>
- name: get_acc_n
  struct_name: TaskCB
  comment: |-
    Obtains the dimension of the affine conic constraint.

    # Arguments

    - `accidx_` The index of the affine conic constraint.

    # Returns

    - `n` The dimension of the affine conic constraint (equal to the dimension of its domain).

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccn>
- name: get_acc_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of an affine conic constraint.

    # Arguments

    - `accidx_` Index of an affine conic constraint.

    # Returns

    - `name` Returns the required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccname>
- name: get_acc_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of the name of an affine conic constraint.

    # Arguments

    - `accidx_` Index of an affine conic constraint.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccnamelen>
- name: get_acc_n_tot
  struct_name: TaskCB
  comment: |-
    Obtains the total dimension of all affine conic constraints.

    # Returns

    - `n` The total dimension of all affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccntot>
- name: get_accs
  struct_name: TaskCB
  comment: |-
    Obtains full data of all affine conic constraints.

    # Arguments

    - `domidxlist_` The list of domains appearing in all affine conic constraints.
    - `afeidxlist_` The concatenation of index lists of affine expressions appearing in all affine conic constraints.
    - `b_` The concatenation of vectors b appearing in all affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccs>
- name: get_a_col
  struct_name: TaskCB
  comment: |-
    Obtains one column of the linear constraint matrix.

    # Arguments

    - `j_` Index of the column.
    - `nzj_` Number of non-zeros in the column obtained.
    - `subj_` Row indices of the non-zeros in the column obtained.
    - `valj_` Numerical values in the column obtained.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacol>
- name: get_a_col_num_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of non-zero elements in one column of the linear constraint matrix

    # Arguments

    - `i_` Index of the column.

    # Returns

    - `nzj` Number of non-zeros in the j'th column of (A).

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacolnumnz>
- name: get_a_col_slice
  struct_name: TaskCB
  comment: |-
    Obtains a sequence of columns from the coefficient matrix.

    # Arguments

    - `first_` Index of the first column in the sequence.
    - `last_` Index of the last column in the sequence plus one.
    - `ptrb_` Column start pointers.
    - `ptre_` Column end pointers.
    - `sub_` Contains the row subscripts.
    - `val_` Contains the coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacolslice64>
- name: get_a_col_slice_num_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of non-zeros in a slice of columns of the coefficient matrix.

    # Arguments

    - `first_` Index of the first column in the sequence.
    - `last_` Index of the last column plus one in the sequence.

    # Returns

    - `numnz` Number of non-zeros in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacolslicenumnz64>
- name: get_a_col_slice_trip
  struct_name: TaskCB
  comment: |-
    Obtains a sequence of columns from the coefficient matrix in triplet format.

    # Arguments

    - `first_` Index of the first column in the sequence.
    - `last_` Index of the last column in the sequence plus one.
    - `subi_` Constraint subscripts.
    - `subj_` Column subscripts.
    - `val_` Values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacolslicetrip>
- name: get_afe_barf_block_triplet
  struct_name: TaskCB
  comment: |-
    Obtains barF in block triplet form.

    # Arguments

    - `afeidx_` Constraint index.
    - `barvaridx_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valkl_` The numerical value associated with each block triplet.

    # Returns

    - `numtrip` Number of elements in the block triplet form.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfblocktriplet>
- name: get_afe_barf_num_block_triplets
  struct_name: TaskCB
  comment: |-
    Obtains an upper bound on the number of elements in the block triplet form of barf.

    # Returns

    - `numtrip` An upper bound on the number of elements in the block triplet form of barf.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfnumblocktriplets>
- name: get_afe_barf_num_row_entries
  struct_name: TaskCB
  comment: |-
    Obtains the number of nonzero entries in a row of barF.

    # Arguments

    - `afeidx_` Row index of barF.

    # Returns

    - `numentr` Number of nonzero entries in a row of barF.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfnumrowentries>
- name: get_afe_barf_row
  struct_name: TaskCB
  comment: |-
    Obtains nonzero entries in one row of barF.

    # Arguments

    - `afeidx_` Row index of barF.
    - `barvaridx_` Semidefinite variable indices.
    - `ptrterm_` Pointers to the description of entries.
    - `numterm_` Number of terms in each entry.
    - `termidx_` Indices of semidefinite matrices from E.
    - `termweight_` Weights appearing in the weighted sum representation.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfrow>
- name: get_afe_barf_row_info
  struct_name: TaskCB
  comment: |-
    Obtains information about one row of barF.

    # Arguments

    - `afeidx_` Row index of barF.
    - `numentr_` Number of nonzero entries in a row of barF.
    - `numterm_` Number of terms in the weighted sums representation of the row of barF.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfrowinfo>
- name: get_afe_f_num_nz
  struct_name: TaskCB
  comment: |-
    Obtains the total number of nonzeros in F.

    # Returns

    - `numnz` Number of nonzeros in F.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafefnumnz>
- name: get_afe_f_row
  struct_name: TaskCB
  comment: |-
    Obtains one row of F in sparse format.

    # Arguments

    - `afeidx_` Row index.
    - `numnz_` Number of non-zeros in the row obtained.
    - `varidx_` Column indices of the non-zeros in the row obtained.
    - `val_` Values of the non-zeros in the row obtained.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafefrow>
- name: get_afe_f_row_num_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of nonzeros in a row of F.

    # Arguments

    - `afeidx_` Row index.

    # Returns

    - `numnz` Number of non-zeros in the row.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafefrownumnz>
- name: get_afe_f_trip
  struct_name: TaskCB
  comment: |-
    Obtains the F matrix in triplet format.

    # Arguments

    - `afeidx_` Row indices of nonzeros.
    - `varidx_` Column indices of nonzeros.
    - `val_` Values of nonzero entries.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafeftrip>
- name: get_afe_g
  struct_name: TaskCB
  comment: |-
    Obtains a single coefficient in g.

    # Arguments

    - `afeidx_` Element index.

    # Returns

    - `g` The entry in g.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafeg>
- name: get_afe_g_slice
  struct_name: TaskCB
  comment: |-
    Obtains a sequence of coefficients from the vector g.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `g_` The slice of g as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafegslice>
- name: get_aij
  struct_name: TaskCB
  comment: |-
    Obtains a single coefficient in linear constraint matrix.

    # Arguments

    - `i_` Row index of the coefficient to be returned.
    - `j_` Column index of the coefficient to be returned.

    # Returns

    - `aij` Returns the requested coefficient.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaij>
- name: get_a_piece_num_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number non-zeros in a rectangular piece of the linear constraint matrix.

    # Arguments

    - `firsti_` Index of the first row in the rectangular piece.
    - `lasti_` Index of the last row plus one in the rectangular piece.
    - `firstj_` Index of the first column in the rectangular piece.
    - `lastj_` Index of the last column plus one in the rectangular piece.

    # Returns

    - `numnz` Number of non-zero elements in the rectangular piece of the linear constraint matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getapiecenumnz>
- name: get_a_row
  struct_name: TaskCB
  comment: |-
    Obtains one row of the linear constraint matrix.

    # Arguments

    - `i_` Index of the row.
    - `nzi_` Number of non-zeros in the row obtained.
    - `subi_` Column indices of the non-zeros in the row obtained.
    - `vali_` Numerical values of the row obtained.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarow>
- name: get_a_row_num_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of non-zero elements in one row of the linear constraint matrix

    # Arguments

    - `i_` Index of the row.

    # Returns

    - `nzi` Number of non-zeros in the i'th row of `A`.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarownumnz>
- name: get_a_row_slice
  struct_name: TaskCB
  comment: |-
    Obtains a sequence of rows from the coefficient matrix.

    # Arguments

    - `first_` Index of the first row in the sequence.
    - `last_` Index of the last row in the sequence plus one.
    - `ptrb_` Row start pointers.
    - `ptre_` Row end pointers.
    - `sub_` Contains the column subscripts.
    - `val_` Contains the coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarowslice64>
- name: get_a_row_slice_num_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of non-zeros in a slice of rows of the coefficient matrix.

    # Arguments

    - `first_` Index of the first row in the sequence.
    - `last_` Index of the last row plus one in the sequence.

    # Returns

    - `numnz` Number of non-zeros in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarowslicenumnz64>
- name: get_a_row_slice_trip
  struct_name: TaskCB
  comment: |-
    Obtains a sequence of rows from the coefficient matrix in sparse triplet format.

    # Arguments

    - `first_` Index of the first row in the sequence.
    - `last_` Index of the last row in the sequence plus one.
    - `subi_` Constraint subscripts.
    - `subj_` Column subscripts.
    - `val_` Values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarowslicetrip>
- name: get_a_trip
  struct_name: TaskCB
  comment: |-
    Obtains the A matrix in sparse triplet format.

    # Arguments

    - `subi_` Constraint subscripts.
    - `subj_` Column subscripts.
    - `val_` Values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getatrip>
- name: get_a_truncate_tol
  struct_name: TaskCB
  comment: |-
    Gets the current A matrix truncation threshold.

    # Arguments

    - `tolzero_` Truncation tolerance.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getatruncatetol>
- name: get_bara_block_triplet
  struct_name: TaskCB
  comment: |-
    Obtains barA in block triplet form.

    # Arguments

    - `subi_` Constraint index.
    - `subj_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valijkl_` The numerical value associated with each block triplet.

    # Returns

    - `num` Number of elements in the block triplet form.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarablocktriplet>
- name: get_bara_idx
  struct_name: TaskCB
  comment: |-
    Obtains information about an element in barA.

    # Arguments

    - `idx_` Position of the element in the vectorized form.
    - `i_` Row index of the element at position idx.
    - `j_` Column index of the element at position idx.
    - `sub_` A list indexes of the elements from symmetric matrix storage that appear in the weighted sum.
    - `weights_` The weights associated with each term in the weighted sum.

    # Returns

    - `num` Number of terms in weighted sum that forms the element.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbaraidx>
- name: get_bara_idx_i_j
  struct_name: TaskCB
  comment: |-
    Obtains information about an element in barA.

    # Arguments

    - `idx_` Position of the element in the vectorized form.
    - `i_` Row index of the element at position idx.
    - `j_` Column index of the element at position idx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbaraidxij>
- name: get_bara_idx_info
  struct_name: TaskCB
  comment: |-
    Obtains the number of terms in the weighted sum that form a particular element in barA.

    # Arguments

    - `idx_` The internal position of the element for which information should be obtained.

    # Returns

    - `num` Number of terms in the weighted sum that form the specified element in barA.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbaraidxinfo>
- name: get_bara_sparsity
  struct_name: TaskCB
  comment: |-
    Obtains the sparsity pattern of the barA matrix.

    # Arguments

    - `numnz_` Number of nonzero elements in barA.
    - `idxij_` Position of each nonzero element in the vector representation of barA.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarasparsity>
- name: get_barc_block_triplet
  struct_name: TaskCB
  comment: |-
    Obtains barC in block triplet form.

    # Arguments

    - `subj_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valjkl_` The numerical value associated with each block triplet.

    # Returns

    - `num` Number of elements in the block triplet form.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcblocktriplet>
- name: get_barc_idx
  struct_name: TaskCB
  comment: |-
    Obtains information about an element in barc.

    # Arguments

    - `idx_` Index of the element for which information should be obtained.
    - `j_` Row index in barc.
    - `num_` Number of terms in the weighted sum.
    - `sub_` Elements appearing the weighted sum.
    - `weights_` Weights of terms in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcidx>
- name: get_barc_idx_info
  struct_name: TaskCB
  comment: |-
    Obtains information about an element in barc.

    # Arguments

    - `idx_` Index of the element for which information should be obtained. The value is an index of a symmetric sparse variable.

    # Returns

    - `num` Number of terms that appear in the weighted sum that forms the requested element.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcidxinfo>
- name: get_barc_idx_j
  struct_name: TaskCB
  comment: |-
    Obtains the row index of an element in barc.

    # Arguments

    - `idx_` Index of the element for which information should be obtained.
    - `j_` Row index in barc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcidxj>
- name: get_barc_sparsity
  struct_name: TaskCB
  comment: |-
    Get the positions of the nonzero elements in barc.

    # Arguments

    - `numnz_` Number of nonzero elements in barc.
    - `idxj_` Internal positions of the nonzeros elements in barc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcsparsity>
- name: get_bars_j
  struct_name: TaskCB
  comment: |-
    Obtains the dual solution for a semidefinite variable.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `j_` Index of the semidefinite variable.
    - `barsj_` Value of the j'th dual variable of barx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarsj>
- name: get_bars_slice
  struct_name: TaskCB
  comment: |-
    Obtains the dual solution for a sequence of semidefinite variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` Index of the first semidefinite variable in the slice.
    - `last_` Index of the last semidefinite variable in the slice plus one.
    - `slicesize_` Denotes the length of the array barsslice.
    - `barsslice_` Dual solution values of symmetric matrix variables in the slice, stored sequentially.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarsslice>
- name: get_barvar_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of a semidefinite variable.

    # Arguments

    - `i_` Index of the variable.

    # Returns

    - `name` The requested name is copied to this buffer.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarvarname>
- name: get_barvar_name_index
  struct_name: TaskCB
  comment: |-
    Obtains the index of semidefinite variable from its name.

    # Arguments

    - `somename_` The name of the variable.
    - `asgn_` Non-zero if the name somename is assigned to some semidefinite variable.

    # Returns

    - `index` The index of a semidefinite variable with the name somename (if one exists).

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarvarnameindex>
- name: get_barvar_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of the name of a semidefinite variable.

    # Arguments

    - `i_` Index of the variable.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarvarnamelen>
- name: get_barx_j
  struct_name: TaskCB
  comment: |-
    Obtains the primal solution for a semidefinite variable.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `j_` Index of the semidefinite variable.
    - `barxj_` Value of the j'th variable of barx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarxj>
- name: get_barx_slice
  struct_name: TaskCB
  comment: |-
    Obtains the primal solution for a sequence of semidefinite variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` Index of the first semidefinite variable in the slice.
    - `last_` Index of the last semidefinite variable in the slice plus one.
    - `slicesize_` Denotes the length of the array barxslice.
    - `barxslice_` Solution values of symmetric matrix variables in the slice, stored sequentially.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarxslice>
- name: get_c
  struct_name: TaskCB
  comment: |-
    Obtains all objective coefficients.

    # Arguments

    - `c_` Linear terms of the objective as a dense vector. The length is the number of variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getc>
- name: get_cfix
  struct_name: TaskCB
  comment: |-
    Obtains the fixed term in the objective.

    # Returns

    - `cfix` Fixed term in the objective.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcfix>
- name: get_c_j
  struct_name: TaskCB
  comment: |-
    Obtains one objective coefficient.

    # Arguments

    - `j_` Index of the variable for which the c coefficient should be obtained.
    - `cj_` The c coefficient value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcj>
- name: get_c_list
  struct_name: TaskCB
  comment: |-
    Obtains a sequence of coefficients from the objective.

    # Arguments

    - `subj_` A list of variable indexes.
    - `c_` Linear terms of the requested list of the objective as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getclist>
- name: get_con_bound
  struct_name: TaskCB
  comment: |-
    Obtains bound information for one constraint.

    # Arguments

    - `i_` Index of the constraint for which the bound information should be obtained.
    - `bk_` Bound keys.

    See [Boundkey]
    - `bl_` Values for lower bounds.
    - `bu_` Values for upper bounds.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconbound>
- name: get_con_bound_slice
  struct_name: TaskCB
  comment: |-
    Obtains bounds information for a slice of the constraints.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bk_` Bound keys.

    See [Boundkey]
    - `bl_` Values for lower bounds.
    - `bu_` Values for upper bounds.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconboundslice>
- name: get_cone
  struct_name: TaskCB
  comment: |-
    Obtains a cone.

    # Arguments

    - `k_` Index of the cone.
    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `nummem_` Number of member variables in the cone.
    - `submem_` Variable subscripts of the members in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcone>
- name: get_cone_info
  struct_name: TaskCB
  comment: |-
    Obtains information about a cone.

    # Arguments

    - `k_` Index of the cone.
    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `nummem_` Number of member variables in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconeinfo>
- name: get_cone_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of a cone.

    # Arguments

    - `i_` Index of the cone.

    # Returns

    - `name` The required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconename>
- name: get_cone_name_index
  struct_name: TaskCB
  comment: |-
    Checks whether the name has been assigned to any cone.

    # Arguments

    - `somename_` The name which should be checked.
    - `asgn_` Is non-zero if the name somename is assigned to some cone.

    # Returns

    - `index` If the name somename is assigned to some cone, this is the index of the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconenameindex>
- name: get_cone_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of the name of a cone.

    # Arguments

    - `i_` Index of the cone.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconenamelen>
- name: get_con_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of a constraint.

    # Arguments

    - `i_` Index of the constraint.

    # Returns

    - `name` The required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconname>
- name: get_con_name_index
  struct_name: TaskCB
  comment: |-
    Checks whether the name has been assigned to any constraint.

    # Arguments

    - `somename_` The name which should be checked.
    - `asgn_` Is non-zero if the name somename is assigned to some constraint.

    # Returns

    - `index` If the name somename is assigned to a constraint, then return the index of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconnameindex>
- name: get_con_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of the name of a constraint.

    # Arguments

    - `i_` Index of the constraint.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconnamelen>
- name: get_c_slice
  struct_name: TaskCB
  comment: |-
    Obtains a sequence of coefficients from the objective.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `c_` Linear terms of the requested slice of the objective as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcslice>
- name: get_dim_barvar_j
  struct_name: TaskCB
  comment: |-
    Obtains the dimension of a symmetric matrix variable.

    # Arguments

    - `j_` Index of the semidefinite variable whose dimension is requested.

    # Returns

    - `dimbarvarj` The dimension of the j'th semidefinite variable.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdimbarvarj>
- name: get_djc_afe_idx_list
  struct_name: TaskCB
  comment: |-
    Obtains the list of affine expression indexes in a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `afeidxlist_` List of affine expression indexes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcafeidxlist>
- name: get_djc_b
  struct_name: TaskCB
  comment: |-
    Obtains the optional constant term vector of a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `b_` The vector b.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcb>
- name: get_djc_domain_idx_list
  struct_name: TaskCB
  comment: |-
    Obtains the list of domain indexes in a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `domidxlist_` List of term sizes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcdomainidxlist>
- name: get_djc_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of a disjunctive constraint.

    # Returns

    - `name` Returns the required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcname>
- name: get_djc_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of the name of a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of a disjunctive constraint.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnamelen>
- name: get_djc_num_afe
  struct_name: TaskCB
  comment: |-
    Obtains the number of affine expressions in the disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.

    # Returns

    - `numafe` Number of affine expressions in the disjunctive constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumafe>
- name: get_djc_num_afe_tot
  struct_name: TaskCB
  comment: |-
    Obtains the number of affine expressions in all disjunctive constraints.

    # Returns

    - `numafetot` Number of affine expressions in all disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumafetot>
- name: get_djc_num_domain
  struct_name: TaskCB
  comment: |-
    Obtains the number of domains in the disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.

    # Returns

    - `numdomain` Number of domains in the disjunctive constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumdomain>
- name: get_djc_num_domain_tot
  struct_name: TaskCB
  comment: |-
    Obtains the number of domains in all disjunctive constraints.

    # Returns

    - `numdomaintot` Number of domains in all disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumdomaintot>
- name: get_djc_num_term
  struct_name: TaskCB
  comment: |-
    Obtains the number terms in the disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.

    # Returns

    - `numterm` Number of terms in the disjunctive constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumterm>
- name: get_djc_num_term_tot
  struct_name: TaskCB
  comment: |-
    Obtains the number of terms in all disjunctive constraints.

    # Returns

    - `numtermtot` Total number of terms in all disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumtermtot>
- name: get_djcs
  struct_name: TaskCB
  comment: |-
    Obtains full data of all disjunctive constraints.

    # Arguments

    - `domidxlist_` The concatenation of index lists of domains appearing in all disjunctive constraints.
    - `afeidxlist_` The concatenation of index lists of affine expressions appearing in all disjunctive constraints.
    - `b_` The concatenation of vectors b appearing in all disjunctive constraints.
    - `termsizelist_` The concatenation of lists of term sizes appearing in all disjunctive constraints.
    - `numterms_` The number of terms in each of the disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcs>
- name: get_djc_term_size_list
  struct_name: TaskCB
  comment: |-
    Obtains the list of term sizes in a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `termsizelist_` List of term sizes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjctermsizelist>
- name: get_domain_n
  struct_name: TaskCB
  comment: |-
    Obtains the dimension of the domain.

    # Arguments

    - `domidx_` Index of the domain.

    # Returns

    - `n` Dimension of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdomainn>
- name: get_domain_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of a domain.

    # Arguments

    - `domidx_` Index of a domain.

    # Returns

    - `name` Returns the required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdomainname>
- name: get_domain_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of the name of a domain.

    # Arguments

    - `domidx_` Index of a domain.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdomainnamelen>
- name: get_domain_type
  struct_name: TaskCB
  comment: |-
    Returns the type of the domain.

    # Arguments

    - `domidx_` Index of the domain.

    # Returns

    - `domtype` The type of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdomaintype>
- name: get_dou_inf
  struct_name: TaskCB
  comment: |-
    Obtains a double information item.

    # Arguments

    - `whichdinf_` Specifies a double information item.

    See [Dinfitem]

    # Returns

    - `dvalue` The value of the required double information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdouinf>
- name: get_dou_param
  struct_name: TaskCB
  comment: |-
    Obtains a double parameter.

    # Arguments

    - `param_` Which parameter.

    See [Dparam]

    # Returns

    - `parvalue` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdouparam>
- name: get_dual_obj
  struct_name: TaskCB
  comment: |-
    Computes the dual objective value associated with the solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `dualobj_` Objective value corresponding to the dual solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdualobj>
- name: get_dual_solution_norms
  struct_name: TaskCB
  comment: |-
    Compute norms of the dual solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `nrmy_` The norm of the y vector.
    - `nrmslc_` The norm of the slc vector.
    - `nrmsuc_` The norm of the suc vector.
    - `nrmslx_` The norm of the slx vector.
    - `nrmsux_` The norm of the sux vector.
    - `nrmsnx_` The norm of the snx vector.
    - `nrmbars_` The norm of the bars vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdualsolutionnorms>
- name: get_dviol_acc
  struct_name: TaskCB
  comment: |-
    Computes the violation of the dual solution for set of affine conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidxlist_` An array of indexes of conic constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolacc>
- name: get_dviol_barvar
  struct_name: TaskCB
  comment: |-
    Computes the violation of dual solution for a set of semidefinite variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of barx variables.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolbarvar>
- name: get_dviol_con
  struct_name: TaskCB
  comment: |-
    Computes the violation of a dual solution associated with a set of constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolcon>
- name: get_dviol_cones
  struct_name: TaskCB
  comment: |-
    Computes the violation of a solution for set of dual conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of conic constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolcones>
- name: get_dviol_var
  struct_name: TaskCB
  comment: |-
    Computes the violation of a dual solution associated with a set of scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of x variables.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolvar>
- name: get_inf_index
  struct_name: TaskCB
  comment: |-
    Obtains the index of a named information item.

    # Arguments

    - `inftype_` Type of the information item.

    See [Inftype]
    - `infname_` Name of the information item.
    - `infindex_` The item index.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getinfindex>
- name: get_inf_max
  struct_name: TaskCB
  comment: |-
    Obtains the maximum index of an information item of a given type.

    # Arguments

    - `inftype_` Type of the information item.

    See [Inftype]
    - `infmax_` The maximum index (plus 1) requested.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getinfmax>
- name: get_inf_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of an information item.

    # Arguments

    - `inftype_` Type of the information item.

    See [Inftype]
    - `whichinf_` An information item.

    # Returns

    - `infname` Name of the information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getinfname>
- name: get_int_inf
  struct_name: TaskCB
  comment: |-
    Obtains an integer information item.

    # Arguments

    - `whichiinf_` Specifies an integer information item.

    See [Iinfitem]

    # Returns

    - `ivalue` The value of the required integer information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getintinf>
- name: get_int_param
  struct_name: TaskCB
  comment: |-
    Obtains an integer parameter.

    # Arguments

    - `param_` Which parameter.

    See [Iparam]

    # Returns

    - `parvalue` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getintparam>
- name: get_len_barvar_j
  struct_name: TaskCB
  comment: |-
    Obtains the length of one semidefinite variable.

    # Arguments

    - `j_` Index of the semidefinite variable whose length if requested.

    # Returns

    - `lenbarvarj` Number of scalar elements in the lower triangular part of the semidefinite variable.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getlenbarvarj>
- name: get_lint_inf
  struct_name: TaskCB
  comment: |-
    Obtains a long integer information item.

    # Arguments

    - `whichliinf_` Specifies a long information item.

    See [Liinfitem]

    # Returns

    - `ivalue` The value of the required long integer information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getlintinf>
- name: get_max_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the maximum length (not including terminating zero character) of any objective, constraint, variable, domain or cone name.

    # Arguments

    - `maxlen_` The maximum length of any name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnamelen>
- name: get_max_num_a_nz
  struct_name: TaskCB
  comment: |-
    Obtains number of preallocated non-zeros in the linear constraint matrix.

    # Returns

    - `maxnumanz` Number of preallocated non-zero linear matrix elements.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumanz64>
- name: get_max_num_barvar
  struct_name: TaskCB
  comment: |-
    Obtains maximum number of symmetric matrix variables for which space is currently preallocated.

    # Returns

    - `maxnumbarvar` Maximum number of symmetric matrix variables for which space is currently preallocated.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumbarvar>
- name: get_max_num_con
  struct_name: TaskCB
  comment: |-
    Obtains the number of preallocated constraints in the optimization task.

    # Arguments

    - `maxnumcon_` Number of preallocated constraints in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumcon>
- name: get_max_num_cone
  struct_name: TaskCB
  comment: |-
    Obtains the number of preallocated cones in the optimization task.

    # Arguments

    - `maxnumcone_` Number of preallocated conic constraints in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumcone>
- name: get_max_num_q_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of preallocated non-zeros for all quadratic terms in objective and constraints.

    # Arguments

    - `maxnumqnz_` Number of non-zero elements preallocated in quadratic coefficient matrices.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumqnz64>
- name: get_max_num_var
  struct_name: TaskCB
  comment: |-
    Obtains the maximum number variables allowed.

    # Arguments

    - `maxnumvar_` Number of preallocated variables in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumvar>
- name: get_mem_usage
  struct_name: TaskCB
  comment: |-
    Obtains information about the amount of memory used by a task.

    # Arguments

    - `meminuse_` Amount of memory currently used by the task.
    - `maxmemuse_` Maximum amount of memory used by the task until now.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmemusagetask>
- name: get_mio_num_threads
  struct_name: TaskCB
  comment: |-
    Obtains the number of threads used by the mixed integer optimizer.

    # Returns

    - `numthreads` The number of threads.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmionumthreads>
- name: get_na_dou_inf
  struct_name: TaskCB
  comment: |-
    Obtains a named double information item.

    # Arguments

    - `infitemname_` The name of a double information item.
    - `dvalue_` The value of the required double information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnadouinf>
- name: get_na_dou_param
  struct_name: TaskCB
  comment: |-
    Obtains a double parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnadouparam>
- name: get_na_int_inf
  struct_name: TaskCB
  comment: |-
    Obtains a named integer information item.

    # Arguments

    - `infitemname_` The name of an integer information item.
    - `ivalue_` The value of the required integer information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnaintinf>
- name: get_na_int_param
  struct_name: TaskCB
  comment: |-
    Obtains an integer parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnaintparam>
- name: get_na_str_param
  struct_name: TaskCB
  comment: |-
    Obtains a string parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `sizeparamname_` Size of the name buffer.
    - `len_` Returns the length of the parameter value.

    # Returns

    - `parvalue` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnastrparam>
- name: get_num_acc
  struct_name: TaskCB
  comment: |-
    Obtains the number of affine conic constraints.

    # Returns

    - `num` The number of affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumacc>
- name: get_num_afe
  struct_name: TaskCB
  comment: |-
    Obtains the number of affine expressions.

    # Returns

    - `numafe` Number of affine expressions.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumafe>
- name: get_num_a_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of non-zeros in the coefficient matrix.

    # Returns

    - `numanz` Number of non-zero elements in the linear constraint matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumanz>
- name: get_num_a_nz_64
  struct_name: TaskCB
  comment: |-
    Obtains the number of non-zeros in the coefficient matrix.

    # Returns

    - `numanz` Number of non-zero elements in the linear constraint matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumanz64>
- name: get_num_bara_block_triplets
  struct_name: TaskCB
  comment: |-
    Obtains an upper bound on the number of scalar elements in the block triplet form of bara.

    # Returns

    - `num` An upper bound on the number of elements in the block triplet form of bara.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbarablocktriplets>
- name: get_num_bara_nz
  struct_name: TaskCB
  comment: |-
    Get the number of nonzero elements in barA.

    # Returns

    - `nz` The number of nonzero block elements in barA.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbaranz>
- name: get_num_barc_block_triplets
  struct_name: TaskCB
  comment: |-
    Obtains an upper bound on the number of elements in the block triplet form of barc.

    # Returns

    - `num` An upper bound on the number of elements in the block triplet form of barc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbarcblocktriplets>
- name: get_num_barc_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of nonzero elements in barc.

    # Returns

    - `nz` The number of nonzero elements in barc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbarcnz>
- name: get_num_barvar
  struct_name: TaskCB
  comment: |-
    Obtains the number of semidefinite variables.

    # Returns

    - `numbarvar` Number of semidefinite variables in the problem.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbarvar>
- name: get_num_con
  struct_name: TaskCB
  comment: |-
    Obtains the number of constraints.

    # Returns

    - `numcon` Number of constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumcon>
- name: get_num_cone
  struct_name: TaskCB
  comment: |-
    Obtains the number of cones.

    # Returns

    - `numcone` Number of conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumcone>
- name: get_num_cone_mem
  struct_name: TaskCB
  comment: |-
    Obtains the number of members in a cone.

    # Arguments

    - `k_` Index of the cone.
    - `nummem_` Number of member variables in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumconemem>
- name: get_num_djc
  struct_name: TaskCB
  comment: |-
    Obtains the number of disjunctive constraints.

    # Returns

    - `num` The number of disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumdjc>
- name: get_num_domain
  struct_name: TaskCB
  comment: |-
    Obtain the number of domains defined.

    # Returns

    - `numdomain` Number of domains in the task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumdomain>
- name: get_num_int_var
  struct_name: TaskCB
  comment: |-
    Obtains the number of integer-constrained variables.

    # Returns

    - `numintvar` Number of integer variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumintvar>
- name: get_num_param
  struct_name: TaskCB
  comment: |-
    Obtains the number of parameters of a given type.

    # Arguments

    - `partype_` Parameter type.

    See [Parametertype]
    - `numparam_` Returns the number of parameters of the requested type.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumparam>
- name: get_num_q_con_k_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of non-zero quadratic terms in a constraint.

    # Arguments

    - `k_` Index of the constraint for which the number quadratic terms should be obtained.

    # Returns

    - `numqcnz` Number of quadratic terms.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumqconknz64>
- name: get_num_q_obj_nz
  struct_name: TaskCB
  comment: |-
    Obtains the number of non-zero quadratic terms in the objective.

    # Returns

    - `numqonz` Number of non-zero elements in the quadratic objective terms.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumqobjnz64>
- name: get_num_sym_mat
  struct_name: TaskCB
  comment: |-
    Obtains the number of symmetric matrices stored.

    # Arguments

    - `num_` The number of symmetric sparse matrices.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumsymmat>
- name: get_num_var
  struct_name: TaskCB
  comment: |-
    Obtains the number of variables.

    # Returns

    - `numvar` Number of variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumvar>
- name: get_obj_name
  struct_name: TaskCB
  comment: |-
    Obtains the name assigned to the objective function.

    # Returns

    - `objname` Assigned the objective name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getobjname>
- name: get_obj_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of the name assigned to the objective function.

    # Returns

    - `len` Assigned the length of the objective name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getobjnamelen>
- name: get_obj_sense
  struct_name: TaskCB
  comment: |-
    Gets the objective sense.

    # Returns

    - `sense` The returned objective sense.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getobjsense>
- name: get_param_max
  struct_name: TaskCB
  comment: |-
    Obtains the maximum index of a parameter of a given type.

    # Arguments

    - `partype_` Parameter type.

    See [Parametertype]
    - `parammax_` The maximum index (plus 1) of the given parameter type.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getparammax>
- name: get_param_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of a parameter.

    # Arguments

    - `partype_` Parameter type.

    See [Parametertype]
    - `param_` Which parameter.

    # Returns

    - `parname` Parameter name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getparamname>
- name: get_power_domain_alpha
  struct_name: TaskCB
  comment: |-
    Obtains the exponent vector of a power domain.

    # Arguments

    - `domidx_` Index of the domain.
    - `alpha_` The exponent vector of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpowerdomainalpha>
- name: get_power_domain_info
  struct_name: TaskCB
  comment: |-
    Obtains structural information about a power domain.

    # Arguments

    - `domidx_` Index of the domain.
    - `n_` Dimension of the domain.
    - `nleft_` Number of variables on the left hand side.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpowerdomaininfo>
- name: get_primal_obj
  struct_name: TaskCB
  comment: |-
    Computes the primal objective value for the desired solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    # Returns

    - `primalobj` Objective value corresponding to the primal solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getprimalobj>
- name: get_primal_solution_norms
  struct_name: TaskCB
  comment: |-
    Compute norms of the primal solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `nrmxc_` The norm of the xc vector.
    - `nrmxx_` The norm of the xx vector.
    - `nrmbarx_` The norm of the barX vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getprimalsolutionnorms>
- name: get_prob_type
  struct_name: TaskCB
  comment: |-
    Obtains the problem type.

    # Returns

    - `probtype` The problem type.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getprobtype>
- name: get_pro_sta
  struct_name: TaskCB
  comment: |-
    Obtains the problem status.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    # Returns

    - `problemsta` Problem status.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getprosta>
- name: get_pviol_acc
  struct_name: TaskCB
  comment: |-
    Computes the violation of a solution for set of affine conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidxlist_` An array of indexes of conic constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolacc>
- name: get_pviol_barvar
  struct_name: TaskCB
  comment: |-
    Computes the violation of a primal solution for a list of semidefinite variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of barX variables.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolbarvar>
- name: get_pviol_con
  struct_name: TaskCB
  comment: |-
    Computes the violation of a primal solution associated to a constraint.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolcon>
- name: get_pviol_cones
  struct_name: TaskCB
  comment: |-
    Computes the violation of a solution for set of conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of conic constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolcones>
- name: get_pviol_djc
  struct_name: TaskCB
  comment: |-
    Computes the violation of a solution for set of disjunctive constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `djcidxlist_` An array of indexes of disjunctive constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpvioldjc>
- name: get_pviol_var
  struct_name: TaskCB
  comment: |-
    Computes the violation of a primal solution for a list of scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of x variables.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolvar>
- name: get_q_con_k
  struct_name: TaskCB
  comment: |-
    Obtains all the quadratic terms in a constraint.

    # Arguments

    - `k_` Which constraint.
    - `qcsubi_` Row subscripts for quadratic constraint matrix.
    - `qcsubj_` Column subscripts for quadratic constraint matrix.
    - `qcval_` Quadratic constraint coefficient values.

    # Returns

    - `numqcnz` Number of quadratic terms.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getqconk64>
- name: get_q_obj
  struct_name: TaskCB
  comment: |-
    Obtains all the quadratic terms in the objective.

    # Arguments

    - `numqonz_` Number of non-zero elements in the quadratic objective terms.
    - `qosubi_` Row subscripts for quadratic objective coefficients.
    - `qosubj_` Column subscripts for quadratic objective coefficients.
    - `qoval_` Quadratic objective coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getqobj64>
- name: get_q_obj_i_j
  struct_name: TaskCB
  comment: |-
    Obtains one coefficient from the quadratic term of the objective

    # Arguments

    - `i_` Row index of the coefficient.
    - `j_` Column index of coefficient.
    - `qoij_` The required coefficient.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getqobjij>
- name: get_reduced_costs
  struct_name: TaskCB
  comment: |-
    Obtains the reduced costs for a sequence of variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` The index of the first variable in the sequence.
    - `last_` The index of the last variable in the sequence plus 1.
    - `redcosts_` Returns the requested reduced costs.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getreducedcosts>
- name: get_skc
  struct_name: TaskCB
  comment: |-
    Obtains the status keys for the constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skc_` Status keys for the constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskc>
- name: get_skc_slice
  struct_name: TaskCB
  comment: |-
    Obtains the status keys for a slice of the constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `skc_` Status keys for the constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskcslice>
- name: get_skn
  struct_name: TaskCB
  comment: |-
    Obtains the status keys for the conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskn>
- name: get_skx
  struct_name: TaskCB
  comment: |-
    Obtains the status keys for the scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skx_` Status keys for the variables.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskx>
- name: get_skx_slice
  struct_name: TaskCB
  comment: |-
    Obtains the status keys for a slice of the scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `skx_` Status keys for the variables.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskxslice>
- name: get_slc
  struct_name: TaskCB
  comment: |-
    Obtains the slc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getslc>
- name: get_slc_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the slc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getslcslice>
- name: get_slx
  struct_name: TaskCB
  comment: |-
    Obtains the slx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `slx_` Dual variables corresponding to the lower bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getslx>
- name: get_slx_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the slx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getslxslice>
- name: get_snx
  struct_name: TaskCB
  comment: |-
    Obtains the snx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsnx>
- name: get_snx_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the snx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsnxslice>
- name: get_sol_sta
  struct_name: TaskCB
  comment: |-
    Obtains the solution status.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    # Returns

    - `solutionsta` Solution status.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolsta>
- name: get_solution
  struct_name: TaskCB
  comment: |-
    Obtains the complete solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `problemsta_` Problem status.

    See [Prosta]
    - `solutionsta_` Solution status.

    See [Solsta]
    - `skc_` Status keys for the constraints.

    See [Stakey]
    - `skx_` Status keys for the variables.

    See [Stakey]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]
    - `xc_` Primal constraint solution.
    - `xx_` Primal variable solution.
    - `y_` Vector of dual variables corresponding to the constraints.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolution>
- name: get_solution_info
  struct_name: TaskCB
  comment: |-
    Obtains information about of a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `pobj_` The primal objective value.
    - `pviolcon_` Maximal primal bound violation for a xc variable.
    - `pviolvar_` Maximal primal bound violation for a xx variable.
    - `pviolbarvar_` Maximal primal bound violation for a barx variable.
    - `pviolcone_` Maximal primal violation of the solution with respect to the conic constraints.
    - `pviolitg_` Maximal violation in the integer constraints.
    - `dobj_` Dual objective value.
    - `dviolcon_` Maximal dual bound violation for a xc variable.
    - `dviolvar_` Maximal dual bound violation for a xx variable.
    - `dviolbarvar_` Maximal dual bound violation for a bars variable.
    - `dviolcone_` Maximum violation of the dual solution in the dual conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolutioninfo>
- name: get_solution_info_new
  struct_name: TaskCB
  comment: |-
    Obtains information about of a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `pobj_` The primal objective value.
    - `pviolcon_` Maximal primal bound violation for a xc variable.
    - `pviolvar_` Maximal primal bound violation for a xx variable.
    - `pviolbarvar_` Maximal primal bound violation for a barx variable.
    - `pviolcone_` Maximal primal violation of the solution with respect to the conic constraints.
    - `pviolacc_` Maximal primal violation of the solution with respect to the affine conic constraints.
    - `pvioldjc_` Maximal primal violation of the solution with respect to the disjunctive constraints.
    - `pviolitg_` Maximal violation in the integer constraints.
    - `dobj_` Dual objective value.
    - `dviolcon_` Maximal dual bound violation for a xc variable.
    - `dviolvar_` Maximal dual bound violation for a xx variable.
    - `dviolbarvar_` Maximal dual bound violation for a bars variable.
    - `dviolcone_` Maximum violation of the dual solution in the dual conic constraints.
    - `dviolacc_` Maximum violation of the dual solution in the dual affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolutioninfonew>
- name: get_solution_new
  struct_name: TaskCB
  comment: |-
    Obtains the complete solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `problemsta_` Problem status.

    See [Prosta]
    - `solutionsta_` Solution status.

    See [Solsta]
    - `skc_` Status keys for the constraints.

    See [Stakey]
    - `skx_` Status keys for the variables.

    See [Stakey]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]
    - `xc_` Primal constraint solution.
    - `xx_` Primal variable solution.
    - `y_` Vector of dual variables corresponding to the constraints.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.
    - `doty_` Dual variables corresponding to affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolutionnew>
- name: get_solution_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `solitem_` Which part of the solution is required.

    See [Solitem]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `values_` The values of the requested solution elements.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolutionslice>
- name: get_sparse_sym_mat
  struct_name: TaskCB
  comment: |-
    Gets a single symmetric matrix from the matrix store.

    # Arguments

    - `idx_` Index of the matrix to retrieve.
    - `subi_` Row subscripts of the matrix non-zero elements.
    - `subj_` Column subscripts of the matrix non-zero elements.
    - `valij_` Coefficients of the matrix non-zero elements.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsparsesymmat>
- name: get_str_param
  struct_name: TaskCB
  comment: |-
    Obtains the value of a string parameter.

    # Arguments

    - `param_` Which parameter.

    See [Sparam]
    - `len_` The length of the parameter value.

    # Returns

    - `parvalue` If this is not a null pointer, the parameter value is stored here.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getstrparam>
- name: get_str_param_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of a string parameter.

    # Arguments

    - `param_` Which parameter.

    See [Sparam]

    # Returns

    - `len` The length of the parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getstrparamlen>
- name: get_suc
  struct_name: TaskCB
  comment: |-
    Obtains the suc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsuc>
- name: get_suc_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the suc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsucslice>
- name: get_sux
  struct_name: TaskCB
  comment: |-
    Obtains the sux vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsux>
- name: get_sux_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the sux vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsuxslice>
- name: get_symb_con
  struct_name: TaskCB
  comment: |-
    Obtains a cone type string identifier.

    # Arguments

    - `i_` Index.
    - `value_` The corresponding value.

    # Returns

    - `name` Name of the i'th symbolic constant.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsymbcon>
- name: get_sym_mat_info
  struct_name: TaskCB
  comment: |-
    Obtains information about a matrix from the symmetric matrix storage.

    # Arguments

    - `idx_` Index of the matrix for which information is requested.
    - `dim_` Returns the dimension of the requested matrix.
    - `nz_` Returns the number of non-zeros in the requested matrix.
    - `mattype_` Returns the type of the requested matrix.

    See [Symmattype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsymmatinfo>
- name: get_task_name
  struct_name: TaskCB
  comment: |-
    Obtains the task name.

    # Returns

    - `taskname` Returns the task name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gettaskname>
- name: get_task_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length the task name.

    # Returns

    - `len` Returns the length of the task name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gettasknamelen>
- name: get_var_bound
  struct_name: TaskCB
  comment: |-
    Obtains bound information for one variable.

    # Arguments

    - `i_` Index of the variable for which the bound information should be obtained.
    - `bk_` Bound keys.

    See [Boundkey]
    - `bl_` Values for lower bounds.
    - `bu_` Values for upper bounds.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarbound>
- name: get_var_bound_slice
  struct_name: TaskCB
  comment: |-
    Obtains bounds information for a slice of the variables.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bk_` Bound keys.

    See [Boundkey]
    - `bl_` Values for lower bounds.
    - `bu_` Values for upper bounds.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarboundslice>
- name: get_var_name
  struct_name: TaskCB
  comment: |-
    Obtains the name of a variable.

    # Arguments

    - `j_` Index of a variable.

    # Returns

    - `name` Returns the required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarname>
- name: get_var_name_index
  struct_name: TaskCB
  comment: |-
    Checks whether the name has been assigned to any variable.

    # Arguments

    - `somename_` The name which should be checked.
    - `asgn_` Is non-zero if the name somename is assigned to a variable.

    # Returns

    - `index` If the name somename is assigned to a variable, then return the index of the variable.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarnameindex>
- name: get_var_name_len
  struct_name: TaskCB
  comment: |-
    Obtains the length of the name of a variable.

    # Arguments

    - `i_` Index of a variable.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarnamelen>
- name: get_var_type
  struct_name: TaskCB
  comment: |-
    Gets the variable type of one variable.

    # Arguments

    - `j_` Index of the variable.

    # Returns

    - `vartype` Variable type of variable index j.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvartype>
- name: get_var_type_list
  struct_name: TaskCB
  comment: |-
    Obtains the variable type for one or more variables.

    # Arguments

    - `subj_` A list of variable indexes.
    - `vartype_` Returns the variables types corresponding the variable indexes requested.

    See [Variabletype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvartypelist>
- name: get_xc
  struct_name: TaskCB
  comment: |-
    Obtains the xc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `xc_` Primal constraint solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getxc>
- name: get_xc_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the xc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `xc_` Primal constraint solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getxcslice>
- name: get_xx
  struct_name: TaskCB
  comment: |-
    Obtains the xx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `xx_` Primal variable solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getxx>
- name: get_xx_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the xx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `xx_` Primal variable solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getxxslice>
- name: get_y
  struct_name: TaskCB
  comment: |-
    Obtains the y vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `y_` Vector of dual variables corresponding to the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gety>
- name: get_y_slice
  struct_name: TaskCB
  comment: |-
    Obtains a slice of the y vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `y_` Vector of dual variables corresponding to the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getyslice>
- name: infeasibility_report
  struct_name: TaskCB
  comment: |-
    Prints the infeasibility report to an output stream.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.infeasibilityreport>
- name: init_basis_solve
  struct_name: TaskCB
  comment: |-
    Prepare a task for basis solver.

    # Arguments

    - `basis_` The array of basis indexes to use.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.initbasissolve>
- name: input_data
  struct_name: TaskCB
  comment: |-
    Input the linear part of an optimization task in one function call.

    # Arguments

    - `maxnumcon_` Number of preallocated constraints in the optimization task.
    - `maxnumvar_` Number of preallocated variables in the optimization task.
    - `c_` Linear terms of the objective as a dense vector. The length is the number of variables.
    - `cfix_` Fixed term in the objective.
    - `aptrb_` Row or column start pointers.
    - `aptre_` Row or column end pointers.
    - `asub_` Coefficient subscripts.
    - `aval_` Coefficient values.
    - `bkc_` Bound keys for the constraints.

    See [Boundkey]
    - `blc_` Lower bounds for the constraints.
    - `buc_` Upper bounds for the constraints.
    - `bkx_` Bound keys for the variables.

    See [Boundkey]
    - `blx_` Lower bounds for the variables.
    - `bux_` Upper bounds for the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.inputdata64>
- name: is_dou_par_name
  struct_name: TaskCB
  comment: |-
    Checks a double parameter name.

    # Arguments

    - `parname_` Parameter name.
    - `param_` Returns the parameter corresponding to the name, if one exists.

    See [Dparam]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.isdouparname>
- name: is_int_par_name
  struct_name: TaskCB
  comment: |-
    Checks an integer parameter name.

    # Arguments

    - `parname_` Parameter name.
    - `param_` Returns the parameter corresponding to the name, if one exists.

    See [Iparam]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.isintparname>
- name: is_str_par_name
  struct_name: TaskCB
  comment: |-
    Checks a string parameter name.

    # Arguments

    - `parname_` Parameter name.
    - `param_` Returns the parameter corresponding to the name, if one exists.

    See [Sparam]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.isstrparname>
- name: link_file_to_stream
  struct_name: TaskCB
  comment: |-
    Directs all output from a task stream to a file.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `filename_` A valid file name.
    - `append_` If this argument is 0 the output file will be overwritten, otherwise it will be appended to.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.linkfiletotaskstream>
- name: one_solution_summary
  struct_name: TaskCB
  comment: |-
    Prints a short summary of a specified solution.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.onesolutionsummary>
- name: optimize_rmt
  struct_name: TaskCB
  comment: |-
    Offload the optimization task to a solver server and wait for the solution.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.
    - `trmcode_` Is either OK or a termination response code.

    See [Rescode]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.optimizermt>
- name: optimizer_summary
  struct_name: TaskCB
  comment: |-
    Prints a short summary with optimizer statistics from last optimization.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.optimizersummary>
- name: optimize
  struct_name: TaskCB
  comment: |-
    Optimizes the problem.

    # Returns

    - `trmcode` Is either OK or a termination response code.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.optimizetrm>
- name: primal_repair
  struct_name: TaskCB
  comment: |-
    Repairs a primal infeasible optimization problem by adjusting the bounds on the constraints and variables.

    # Arguments

    - `wlc_` Weights associated with relaxing lower bounds on the constraints.
    - `wuc_` Weights associated with relaxing the upper bound on the constraints.
    - `wlx_` Weights associated with relaxing the lower bounds of the variables.
    - `wux_` Weights associated with relaxing the upper bounds of variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.primalrepair>
- name: primal_sensitivity
  struct_name: TaskCB
  comment: |-
    Perform sensitivity analysis on bounds.

    # Arguments

    - `subi_` Indexes of constraints to analyze.
    - `marki_` Mark which constraint bounds to analyze.

    See [Mark]
    - `subj_` Indexes of variables to analyze.
    - `markj_` Mark which variable bounds to analyze.

    See [Mark]
    - `leftpricei_` Left shadow price for constraints.
    - `rightpricei_` Right shadow price for constraints.
    - `leftrangei_` Left range for constraints.
    - `rightrangei_` Right range for constraints.
    - `leftpricej_` Left shadow price for variables.
    - `rightpricej_` Right shadow price for variables.
    - `leftrangej_` Left range for variables.
    - `rightrangej_` Right range for variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.primalsensitivity>
- name: print_param
  struct_name: TaskCB
  comment: |-
    Prints the current parameter settings.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.printparam>
- name: put_acc
  struct_name: TaskCB
  comment: |-
    Puts an affine conic constraint.

    # Arguments

    - `accidx_` Affine conic constraint index.
    - `domidx_` Domain index.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacc>
- name: put_acc_b
  struct_name: TaskCB
  comment: |-
    Puts the constant vector b in an affine conic constraint.

    # Arguments

    - `accidx_` Affine conic constraint index.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaccb>
- name: put_acc_b_j
  struct_name: TaskCB
  comment: |-
    Sets one element in the b vector of an affine conic constraint.

    # Arguments

    - `accidx_` Affine conic constraint index.
    - `j_` The index of an element in b to change.
    - `bj_` The new value of b\[j\].

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaccbj>
- name: put_acc_dot_y
  struct_name: TaskCB
  comment: |-
    Puts the doty vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidx_` The index of the affine conic constraint.
    - `doty_` The dual values for this affine conic constraint. The array should have length equal to the dimension of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaccdoty>
- name: put_acc_list
  struct_name: TaskCB
  comment: |-
    Puts a number of affine conic constraints.

    # Arguments

    - `accidxs_` Affine conic constraint indices.
    - `domidxs_` Domain indices.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacclist>
- name: put_acc_name
  struct_name: TaskCB
  comment: |-
    Sets the name of an affine conic constraint.

    # Arguments

    - `accidx_` Index of the affine conic constraint.
    - `name_` The name of the affine conic constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaccname>
- name: put_a_col
  struct_name: TaskCB
  comment: |-
    Replaces all elements in one column of the linear constraint matrix.

    # Arguments

    - `j_` Column index.
    - `subj_` Row indexes of non-zero values in column.
    - `valj_` New non-zero values of column.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacol>
- name: put_a_col_list
  struct_name: TaskCB
  comment: |-
    Replaces all elements in several columns the linear constraint matrix.

    # Arguments

    - `sub_` Indexes of columns that should be replaced.
    - `ptrb_` Array of pointers to the first element in the columns.
    - `ptre_` Array of pointers to the last element plus one in the columns.
    - `asub_` Row indexes
    - `aval_` Coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacollist64>
- name: put_a_col_slice
  struct_name: TaskCB
  comment: |-
    Replaces all elements in a sequence of columns the linear constraint matrix.

    # Arguments

    - `first_` First column in the slice.
    - `last_` Last column plus one in the slice.
    - `ptrb_` Array of pointers to the first element in the columns.
    - `ptre_` Array of pointers to the last element plus one in the columns.
    - `asub_` Row indexes
    - `aval_` Coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacolslice64>
- name: put_afe_barf_block_triplet
  struct_name: TaskCB
  comment: |-
    Inputs barF in block triplet form.

    # Arguments

    - `afeidx_` Constraint index.
    - `barvaridx_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valkl_` The numerical value associated with each block triplet.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafebarfblocktriplet>
- name: put_afe_barf_entry
  struct_name: TaskCB
  comment: |-
    Inputs one entry in barF.

    # Arguments

    - `afeidx_` Row index of barF.
    - `barvaridx_` Semidefinite variable index.
    - `termidx_` Element indices in matrix storage.
    - `termweight_` Weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafebarfentry>
- name: put_afe_barf_entry_list
  struct_name: TaskCB
  comment: |-
    Inputs a list of entries in barF.

    # Arguments

    - `afeidx_` Row indexes of barF.
    - `barvaridx_` Semidefinite variable indexes.
    - `numterm_` Number of terms in the weighted sums.
    - `ptrterm_` Pointer to the terms forming each entry.
    - `termidx_` Concatenated element indexes in matrix storage.
    - `termweight_` Concatenated weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafebarfentrylist>
- name: put_afe_barf_row
  struct_name: TaskCB
  comment: |-
    Inputs a row of barF.

    # Arguments

    - `afeidx_` Row index of barF.
    - `barvaridx_` Semidefinite variable indexes.
    - `numterm_` Number of terms in the weighted sums.
    - `ptrterm_` Pointer to the terms forming each entry.
    - `termidx_` Concatenated element indexes in matrix storage.
    - `termweight_` Concatenated weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafebarfrow>
- name: put_afe_f_col
  struct_name: TaskCB
  comment: |-
    Replaces all elements in one column of the F matrix in the affine expressions.

    # Arguments

    - `varidx_` Column index.
    - `afeidx_` Row indexes of non-zero values in the column.
    - `val_` New non-zero values in the column.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefcol>
- name: put_afe_f_entry
  struct_name: TaskCB
  comment: |-
    Replaces one entry in F.

    # Arguments

    - `afeidx_` Row index in F.
    - `varidx_` Column index in F.
    - `value_` Value of the entry.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefentry>
- name: put_afe_f_entry_list
  struct_name: TaskCB
  comment: |-
    Replaces a list of entries in F.

    # Arguments

    - `afeidx_` Row indices in F.
    - `varidx_` Column indices in F.
    - `val_` Values of the entries in F.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefentrylist>
- name: put_afe_f_row
  struct_name: TaskCB
  comment: |-
    Replaces all elements in one row of the F matrix in the affine expressions.

    # Arguments

    - `afeidx_` Row index.
    - `varidx_` Column indexes of non-zero values in the row.
    - `val_` New non-zero values in the row.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefrow>
- name: put_afe_f_row_list
  struct_name: TaskCB
  comment: |-
    Replaces all elements in a number of rows of the F matrix in the affine expressions.

    # Arguments

    - `afeidx_` Row indices.
    - `numnzrow_` Number of non-zeros in each row.
    - `ptrrow_` Pointer to the first nonzero in each row.
    - `varidx_` Column indexes of non-zero values.
    - `val_` New non-zero values in the rows.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefrowlist>
- name: put_afe_g
  struct_name: TaskCB
  comment: |-
    Replaces one element in the g vector in the affine expressions.

    # Arguments

    - `afeidx_` Row index.
    - `g_` New value for the element of g.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafeg>
- name: put_afe_g_list
  struct_name: TaskCB
  comment: |-
    Replaces a list of elements in the g vector in the affine expressions.

    # Arguments

    - `afeidx_` Indices of entries in g.
    - `g_` New values for the elements of g.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafeglist>
- name: put_afe_g_slice
  struct_name: TaskCB
  comment: |-
    Modifies a slice of the vector g.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slice_` The slice of g as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafegslice>
- name: put_aij
  struct_name: TaskCB
  comment: |-
    Changes a single value in the linear coefficient matrix.

    # Arguments

    - `i_` Constraint (row) index.
    - `j_` Variable (column) index.
    - `aij_` New coefficient.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaij>
- name: put_aij_list
  struct_name: TaskCB
  comment: |-
    Changes one or more coefficients in the linear constraint matrix.

    # Arguments

    - `subi_` Constraint (row) indices.
    - `subj_` Variable (column) indices.
    - `valij_` New coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaijlist64>
- name: put_a_row
  struct_name: TaskCB
  comment: |-
    Replaces all elements in one row of the linear constraint matrix.

    # Arguments

    - `i_` Row index.
    - `subi_` Column indexes of non-zero values in row.
    - `vali_` New non-zero values of row.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putarow>
- name: put_a_row_list
  struct_name: TaskCB
  comment: |-
    Replaces all elements in several rows of the linear constraint matrix.

    # Arguments

    - `sub_` Indexes of rows or columns that should be replaced.
    - `ptrb_` Array of pointers to the first element in the rows.
    - `ptre_` Array of pointers to the last element plus one in the rows.
    - `asub_` Variable indexes.
    - `aval_` Coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putarowlist64>
- name: put_a_row_slice
  struct_name: TaskCB
  comment: |-
    Replaces all elements in several rows the linear constraint matrix.

    # Arguments

    - `first_` First row in the slice.
    - `last_` Last row plus one in the slice.
    - `ptrb_` Array of pointers to the first element in the rows.
    - `ptre_` Array of pointers to the last element plus one in the rows.
    - `asub_` Column indexes of new elements.
    - `aval_` Coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putarowslice64>
- name: put_a_truncate_tol
  struct_name: TaskCB
  comment: |-
    Truncates all elements in A below a certain tolerance to zero.

    # Arguments

    - `tolzero_` Truncation tolerance.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putatruncatetol>
- name: put_bara_block_triplet
  struct_name: TaskCB
  comment: |-
    Inputs barA in block triplet form.

    # Arguments

    - `subi_` Constraint index.
    - `subj_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valijkl_` The numerical value associated with each block triplet.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarablocktriplet>
- name: put_bara_ij
  struct_name: TaskCB
  comment: |-
    Inputs an element of barA.

    # Arguments

    - `i_` Row index of barA.
    - `j_` Column index of barA.
    - `sub_` Element indexes in matrix storage.
    - `weights_` Weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbaraij>
- name: put_bara_ij_list
  struct_name: TaskCB
  comment: |-
    Inputs list of elements of barA.

    # Arguments

    - `subi_` Row index of barA.
    - `subj_` Column index of barA.
    - `alphaptrb_` Start entries for terms in the weighted sum.
    - `alphaptre_` End entries for terms in the weighted sum.
    - `matidx_` Element indexes in matrix storage.
    - `weights_` Weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbaraijlist>
- name: put_bara_row_list
  struct_name: TaskCB
  comment: |-
    Replace a set of rows of barA

    # Arguments

    - `subi_` Row indexes of barA.
    - `ptrb_` Start of rows in barA.
    - `ptre_` End of rows in barA.
    - `subj_` Column index of barA.
    - `nummat_` Number of entries in weighted sum of matrixes.
    - `matidx_` Matrix indexes for weighted sum of matrixes.
    - `weights_` Weights for weighted sum of matrixes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbararowlist>
- name: put_barc_block_triplet
  struct_name: TaskCB
  comment: |-
    Inputs barC in block triplet form.

    # Arguments

    - `subj_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valjkl_` The numerical value associated with each block triplet.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarcblocktriplet>
- name: put_barc_j
  struct_name: TaskCB
  comment: |-
    Changes one element in barc.

    # Arguments

    - `j_` Index of the element in barc` that should be changed.
    - `sub_` sub is list of indexes of those symmetric matrices appearing in sum.
    - `weights_` The weights of the terms in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarcj>
- name: put_bars_j
  struct_name: TaskCB
  comment: |-
    Sets the dual solution for a semidefinite variable.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `j_` Index of the semidefinite variable.
    - `barsj_` Value of the j'th variable of barx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarsj>
- name: put_barvar_name
  struct_name: TaskCB
  comment: |-
    Sets the name of a semidefinite variable.

    # Arguments

    - `j_` Index of the variable.
    - `name_` The variable name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarvarname>
- name: put_barx_j
  struct_name: TaskCB
  comment: |-
    Sets the primal solution for a semidefinite variable.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `j_` Index of the semidefinite variable.
    - `barxj_` Value of the j'th variable of barx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarxj>
- name: put_cfix
  struct_name: TaskCB
  comment: |-
    Replaces the fixed term in the objective.

    # Arguments

    - `cfix_` Fixed term in the objective.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putcfix>
- name: put_c_j
  struct_name: TaskCB
  comment: |-
    Modifies one linear coefficient in the objective.

    # Arguments

    - `j_` Index of the variable whose objective coefficient should be changed.
    - `cj_` New coefficient value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putcj>
- name: put_c_list
  struct_name: TaskCB
  comment: |-
    Modifies a part of the linear objective coefficients.

    # Arguments

    - `subj_` Indices of variables for which objective coefficients should be changed.
    - `val_` New numerical values for the objective coefficients that should be modified.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putclist>
- name: put_con_bound
  struct_name: TaskCB
  comment: |-
    Changes the bound for one constraint.

    # Arguments

    - `i_` Index of the constraint.
    - `bkc_` New bound key.

    See [Boundkey]
    - `blc_` New lower bound.
    - `buc_` New upper bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconbound>
- name: put_con_bound_list
  struct_name: TaskCB
  comment: |-
    Changes the bounds of a list of constraints.

    # Arguments

    - `sub_` List of constraint indexes.
    - `bkc_` Bound keys for the constraints.

    See [Boundkey]
    - `blc_` Lower bounds for the constraints.
    - `buc_` Upper bounds for the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconboundlist>
- name: put_con_bound_list_const
  struct_name: TaskCB
  comment: |-
    Changes the bounds of a list of constraints.

    # Arguments

    - `sub_` List of constraint indexes.
    - `bkc_` New bound key for all constraints in the list.

    See [Boundkey]
    - `blc_` New lower bound for all constraints in the list.
    - `buc_` New upper bound for all constraints in the list.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconboundlistconst>
- name: put_con_bound_slice
  struct_name: TaskCB
  comment: |-
    Changes the bounds for a slice of the constraints.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bkc_` Bound keys for the constraints.

    See [Boundkey]
    - `blc_` Lower bounds for the constraints.
    - `buc_` Upper bounds for the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconboundslice>
- name: put_con_bound_slice_const
  struct_name: TaskCB
  comment: |-
    Changes the bounds for a slice of the constraints.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bkc_` New bound key for all constraints in the slice.

    See [Boundkey]
    - `blc_` New lower bound for all constraints in the slice.
    - `buc_` New upper bound for all constraints in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconboundsliceconst>
- name: put_cone
  struct_name: TaskCB
  comment: |-
    Replaces a conic constraint.

    # Arguments

    - `k_` Index of the cone.
    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `submem_` Variable subscripts of the members in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putcone>
- name: put_cone_name
  struct_name: TaskCB
  comment: |-
    Sets the name of a cone.

    # Arguments

    - `j_` Index of the cone.
    - `name_` The name of the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconename>
- name: put_con_name
  struct_name: TaskCB
  comment: |-
    Sets the name of a constraint.

    # Arguments

    - `i_` Index of the constraint.
    - `name_` The name of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconname>
- name: put_con_solution_i
  struct_name: TaskCB
  comment: |-
    Sets the primal and dual solution information for a single constraint.

    # Arguments

    - `i_` Index of the constraint.
    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sk_` Status key of the constraint.

    See [Stakey]
    - `x_` Primal solution value of the constraint.
    - `sl_` Solution value of the dual variable associated with the lower bound.
    - `su_` Solution value of the dual variable associated with the upper bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconsolutioni>
- name: put_c_slice
  struct_name: TaskCB
  comment: |-
    Modifies a slice of the linear objective coefficients.

    # Arguments

    - `first_` First element in the slice of c.
    - `last_` Last element plus 1 of the slice in c to be changed.
    - `slice_` New numerical values for the objective coefficients that should be modified.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putcslice>
- name: put_djc
  struct_name: TaskCB
  comment: |-
    Inputs a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `domidxlist_` List of domain indexes.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions.
    - `termsizelist_` List of term sizes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdjc>
- name: put_djc_name
  struct_name: TaskCB
  comment: |-
    Sets the name of a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `name_` The name of the disjunctive constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdjcname>
- name: put_djc_slice
  struct_name: TaskCB
  comment: |-
    Inputs a slice of disjunctive constraints.

    # Arguments

    - `idxfirst_` Index of the first disjunctive constraint in the slice.
    - `idxlast_` Index of the last disjunctive constraint in the slice plus 1.
    - `domidxlist_` List of domain indexes.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, may be NULL.
    - `termsizelist_` List of term sizes.
    - `termsindjc_` Number of terms in each of the disjunctive constraints in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdjcslice>
- name: put_domain_name
  struct_name: TaskCB
  comment: |-
    Sets the name of a domain.

    # Arguments

    - `domidx_` Index of the domain.
    - `name_` The name of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdomainname>
- name: put_dou_param
  struct_name: TaskCB
  comment: |-
    Sets a double parameter.

    # Arguments

    - `param_` Which parameter.

    See [Dparam]
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdouparam>
- name: put_int_param
  struct_name: TaskCB
  comment: |-
    Sets an integer parameter.

    # Arguments

    - `param_` Which parameter.

    See [Iparam]
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putintparam>
- name: put_max_num_acc
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated affine conic constraints.

    # Arguments

    - `maxnumacc_` Number of preallocated affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumacc>
- name: put_max_num_afe
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated affine expressions in the optimization task.

    # Arguments

    - `maxnumafe_` Number of preallocated affine expressions.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumafe>
- name: put_max_num_a_nz
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated non-zero entries in the linear coefficient matrix.

    # Arguments

    - `maxnumanz_` New size of the storage reserved for storing the linear coefficient matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumanz>
- name: put_max_num_barvar
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated symmetric matrix variables.

    # Arguments

    - `maxnumbarvar_` Number of preallocated symmetric matrix variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumbarvar>
- name: put_max_num_con
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated constraints in the optimization task.

    # Arguments

    - `maxnumcon_` Number of preallocated constraints in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumcon>
- name: put_max_num_cone
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated conic constraints in the optimization task.

    # Arguments

    - `maxnumcone_` Number of preallocated conic constraints in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumcone>
- name: put_max_num_djc
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated disjunctive constraints.

    # Arguments

    - `maxnumdjc_` Number of preallocated disjunctive constraints in the task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumdjc>
- name: put_max_num_domain
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated domains in the optimization task.

    # Arguments

    - `maxnumdomain_` Number of preallocated domains.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumdomain>
- name: put_max_num_q_nz
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated non-zero entries in quadratic terms.

    # Arguments

    - `maxnumqnz_` Number of non-zero elements preallocated in quadratic coefficient matrices.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumqnz>
- name: put_max_num_var
  struct_name: TaskCB
  comment: |-
    Sets the number of preallocated variables in the optimization task.

    # Arguments

    - `maxnumvar_` Number of preallocated variables in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumvar>
- name: put_na_dou_param
  struct_name: TaskCB
  comment: |-
    Sets a double parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putnadouparam>
- name: put_na_int_param
  struct_name: TaskCB
  comment: |-
    Sets an integer parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putnaintparam>
- name: put_na_str_param
  struct_name: TaskCB
  comment: |-
    Sets a string parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putnastrparam>
- name: put_obj_name
  struct_name: TaskCB
  comment: |-
    Assigns a new name to the objective.

    # Arguments

    - `objname_` Name of the objective.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putobjname>
- name: put_obj_sense
  struct_name: TaskCB
  comment: |-
    Sets the objective sense.

    # Arguments

    - `sense_` The objective sense of the task

    See [Objsense]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putobjsense>
- name: put_optserver_host
  struct_name: TaskCB
  comment: |-
    Specify an OptServer for remote calls.

    # Arguments

    - `host_` A URL specifying the optimization server to be used.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putoptserverhost>
- name: put_param
  struct_name: TaskCB
  comment: |-
    Modifies the value of parameter.

    # Arguments

    - `parname_` Parameter name.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putparam>
- name: put_q_con
  struct_name: TaskCB
  comment: |-
    Replaces all quadratic terms in constraints.

    # Arguments

    - `qcsubk_` Constraint subscripts for quadratic coefficients.
    - `qcsubi_` Row subscripts for quadratic constraint matrix.
    - `qcsubj_` Column subscripts for quadratic constraint matrix.
    - `qcval_` Quadratic constraint coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putqcon>
- name: put_q_con_k
  struct_name: TaskCB
  comment: |-
    Replaces all quadratic terms in a single constraint.

    # Arguments

    - `k_` The constraint in which the new quadratic elements are inserted.
    - `qcsubi_` Row subscripts for quadratic constraint matrix.
    - `qcsubj_` Column subscripts for quadratic constraint matrix.
    - `qcval_` Quadratic constraint coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putqconk>
- name: put_q_obj
  struct_name: TaskCB
  comment: |-
    Replaces all quadratic terms in the objective.

    # Arguments

    - `qosubi_` Row subscripts for quadratic objective coefficients.
    - `qosubj_` Column subscripts for quadratic objective coefficients.
    - `qoval_` Quadratic objective coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putqobj>
- name: put_q_obj_i_j
  struct_name: TaskCB
  comment: |-
    Replaces one coefficient in the quadratic term in the objective.

    # Arguments

    - `i_` Row index for the coefficient to be replaced.
    - `j_` Column index for the coefficient to be replaced.
    - `qoij_` The new coefficient value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putqobjij>
- name: put_skc
  struct_name: TaskCB
  comment: |-
    Sets the status keys for the constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skc_` Status keys for the constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putskc>
- name: put_skc_slice
  struct_name: TaskCB
  comment: |-
    Sets the status keys for a slice of the constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `skc_` Status keys for the constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putskcslice>
- name: put_skx
  struct_name: TaskCB
  comment: |-
    Sets the status keys for the scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skx_` Status keys for the variables.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putskx>
- name: put_skx_slice
  struct_name: TaskCB
  comment: |-
    Sets the status keys for a slice of the variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `skx_` Status keys for the variables.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putskxslice>
- name: put_slc
  struct_name: TaskCB
  comment: |-
    Sets the slc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putslc>
- name: put_slc_slice
  struct_name: TaskCB
  comment: |-
    Sets a slice of the slc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putslcslice>
- name: put_slx
  struct_name: TaskCB
  comment: |-
    Sets the slx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `slx_` Dual variables corresponding to the lower bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putslx>
- name: put_slx_slice
  struct_name: TaskCB
  comment: |-
    Sets a slice of the slx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putslxslice>
- name: put_snx
  struct_name: TaskCB
  comment: |-
    Sets the snx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsnx>
- name: put_snx_slice
  struct_name: TaskCB
  comment: |-
    Sets a slice of the snx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsnxslice>
- name: put_solution
  struct_name: TaskCB
  comment: |-
    Inserts a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skc_` Status keys for the constraints.

    See [Stakey]
    - `skx_` Status keys for the variables.

    See [Stakey]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]
    - `xc_` Primal constraint solution.
    - `xx_` Primal variable solution.
    - `y_` Vector of dual variables corresponding to the constraints.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsolution>
- name: put_solution_new
  struct_name: TaskCB
  comment: |-
    Inserts a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skc_` Status keys for the constraints.

    See [Stakey]
    - `skx_` Status keys for the variables.

    See [Stakey]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]
    - `xc_` Primal constraint solution.
    - `xx_` Primal variable solution.
    - `y_` Vector of dual variables corresponding to the constraints.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.
    - `doty_` Dual variables corresponding to affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsolutionnew>
- name: put_solution_y_i
  struct_name: TaskCB
  comment: |-
    Inputs the dual variable of a solution.

    # Arguments

    - `i_` Index of the dual variable.
    - `whichsol_` Selects a solution.

    See [Soltype]
    - `y_` Solution value of the dual variable.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsolutionyi>
- name: put_str_param
  struct_name: TaskCB
  comment: |-
    Sets a string parameter.

    # Arguments

    - `param_` Which parameter.

    See [Sparam]
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putstrparam>
- name: put_suc
  struct_name: TaskCB
  comment: |-
    Sets the suc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsuc>
- name: put_suc_slice
  struct_name: TaskCB
  comment: |-
    Sets a slice of the suc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsucslice>
- name: put_sux
  struct_name: TaskCB
  comment: |-
    Sets the sux vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsux>
- name: put_sux_slice
  struct_name: TaskCB
  comment: |-
    Sets a slice of the sux vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsuxslice>
- name: put_task_name
  struct_name: TaskCB
  comment: |-
    Assigns a new name to the task.

    # Arguments

    - `taskname_` Name assigned to the task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.puttaskname>
- name: put_var_bound
  struct_name: TaskCB
  comment: |-
    Changes the bounds for one variable.

    # Arguments

    - `j_` Index of the variable.
    - `bkx_` New bound key.

    See [Boundkey]
    - `blx_` New lower bound.
    - `bux_` New upper bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarbound>
- name: put_var_bound_list
  struct_name: TaskCB
  comment: |-
    Changes the bounds of a list of variables.

    # Arguments

    - `sub_` List of variable indexes.
    - `bkx_` Bound keys for the variables.

    See [Boundkey]
    - `blx_` Lower bounds for the variables.
    - `bux_` Upper bounds for the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarboundlist>
- name: put_var_bound_list_const
  struct_name: TaskCB
  comment: |-
    Changes the bounds of a list of variables.

    # Arguments

    - `sub_` List of variable indexes.
    - `bkx_` New bound key for all variables in the list.

    See [Boundkey]
    - `blx_` New lower bound for all variables in the list.
    - `bux_` New upper bound for all variables in the list.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarboundlistconst>
- name: put_var_bound_slice
  struct_name: TaskCB
  comment: |-
    Changes the bounds for a slice of the variables.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bkx_` Bound keys for the variables.

    See [Boundkey]
    - `blx_` Lower bounds for the variables.
    - `bux_` Upper bounds for the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarboundslice>
- name: put_var_bound_slice_const
  struct_name: TaskCB
  comment: |-
    Changes the bounds for a slice of the variables.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bkx_` New bound key for all variables in the slice.

    See [Boundkey]
    - `blx_` New lower bound for all variables in the slice.
    - `bux_` New upper bound for all variables in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarboundsliceconst>
- name: put_var_name
  struct_name: TaskCB
  comment: |-
    Sets the name of a variable.

    # Arguments

    - `j_` Index of the variable.
    - `name_` The variable name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarname>
- name: put_var_solution_j
  struct_name: TaskCB
  comment: |-
    Sets the primal and dual solution information for a single variable.

    # Arguments

    - `j_` Index of the variable.
    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sk_` Status key of the variable.

    See [Stakey]
    - `x_` Primal solution value of the variable.
    - `sl_` Solution value of the dual variable associated with the lower bound.
    - `su_` Solution value of the dual variable associated with the upper bound.
    - `sn_` Solution value of the dual variable associated with the conic constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarsolutionj>
- name: put_var_type
  struct_name: TaskCB
  comment: |-
    Sets the variable type of one variable.

    # Arguments

    - `j_` Index of the variable.
    - `vartype_` The new variable type.

    See [Variabletype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvartype>
- name: put_var_type_list
  struct_name: TaskCB
  comment: |-
    Sets the variable type for one or more variables.

    # Arguments

    - `subj_` A list of variable indexes for which the variable type should be changed.
    - `vartype_` A list of variable types.

    See [Variabletype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvartypelist>
- name: put_xc
  struct_name: TaskCB
  comment: |-
    Sets the xc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `xc_` Primal constraint solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putxc>
- name: put_xc_slice
  struct_name: TaskCB
  comment: |-
    Sets a slice of the xc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `xc_` Primal constraint solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putxcslice>
- name: put_xx
  struct_name: TaskCB
  comment: |-
    Sets the xx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `xx_` Primal variable solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putxx>
- name: put_xx_slice
  struct_name: TaskCB
  comment: |-
    Sets a slice of the xx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `xx_` Primal variable solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putxxslice>
- name: put_y
  struct_name: TaskCB
  comment: |-
    Sets the y vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `y_` Vector of dual variables corresponding to the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.puty>
- name: put_y_slice
  struct_name: TaskCB
  comment: |-
    Sets a slice of the y vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `y_` Vector of dual variables corresponding to the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putyslice>
- name: read_b_solution
  struct_name: TaskCB
  comment: |-
    Read a binary dump of the task solution and information items.

    # Arguments

    - `filename_` A valid file name.
    - `compress_` Data compression type.

    See [Compresstype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readbsolution>
- name: read_data
  struct_name: TaskCB
  comment: |-
    Reads problem data from a file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readdataautoformat>
- name: read_data_format
  struct_name: TaskCB
  comment: |-
    Reads problem data from a file.

    # Arguments

    - `filename_` A valid file name.
    - `format_` File data format.

    See [Dataformat]
    - `compress_` File compression type.

    See [Compresstype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readdataformat>
- name: read_json_sol
  struct_name: TaskCB
  comment: |-
    Reads a solution from a JSOL file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readjsonsol>
- name: read_json_string
  struct_name: TaskCB
  comment: |-
    Load task data from a string in JSON format.

    # Arguments

    - `data_` Problem data in text format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readjsonstring>
- name: read_lp_string
  struct_name: TaskCB
  comment: |-
    Load task data from a string in LP format.

    # Arguments

    - `data_` Problem data in text format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readlpstring>
- name: read_opf_string
  struct_name: TaskCB
  comment: |-
    Load task data from a string in OPF format.

    # Arguments

    - `data_` Problem data in text format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readopfstring>
- name: read_param_file
  struct_name: TaskCB
  comment: |-
    Reads a parameter file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readparamfile>
- name: read_ptf_string
  struct_name: TaskCB
  comment: |-
    Load task data from a string in PTF format.

    # Arguments

    - `data_` Problem data in text format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readptfstring>
- name: read_solution
  struct_name: TaskCB
  comment: |-
    Reads a solution from a file.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readsolution>
- name: read_solution_file
  struct_name: TaskCB
  comment: |-
    Read solution file in format determined by the filename

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readsolutionfile>
- name: read_summary
  struct_name: TaskCB
  comment: |-
    Prints information about last file read.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readsummary>
- name: read_task
  struct_name: TaskCB
  comment: |-
    Load task data from a file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readtask>
- name: remove_barvars
  struct_name: TaskCB
  comment: |-
    Removes a number of symmetric matrices.

    # Arguments

    - `subset_` Indexes of symmetric matrices which should be removed.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.removebarvars>
- name: remove_cones
  struct_name: TaskCB
  comment: |-
    Removes a number of conic constraints from the problem.

    # Arguments

    - `subset_` Indexes of cones which should be removed.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.removecones>
- name: remove_cons
  struct_name: TaskCB
  comment: |-
    Removes a number of constraints.

    # Arguments

    - `subset_` Indexes of constraints which should be removed.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.removecons>
- name: remove_vars
  struct_name: TaskCB
  comment: |-
    Removes a number of variables.

    # Arguments

    - `subset_` Indexes of variables which should be removed.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.removevars>
- name: resize_task
  struct_name: TaskCB
  comment: |-
    Resizes an optimization task.

    # Arguments

    - `maxnumcon_` New maximum number of constraints.
    - `maxnumvar_` New maximum number of variables.
    - `maxnumcone_` New maximum number of cones.
    - `maxnumanz_` New maximum number of linear non-zero elements.
    - `maxnumqnz_` New maximum number of quadratic non-zeros elements.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.resizetask>
- name: sensitivity_report
  struct_name: TaskCB
  comment: |-
    Creates a sensitivity report.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.sensitivityreport>
- name: set_defaults
  struct_name: TaskCB
  comment: |-
    Resets all parameter values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.setdefaults>
- name: solution_def
  struct_name: TaskCB
  comment: |-
    Checks whether a solution is defined.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    # Returns

    - `isdef` Is non-zero if the requested solution is defined.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.solutiondef>
- name: solution_summary
  struct_name: TaskCB
  comment: |-
    Prints a short summary of the current solutions.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.solutionsummary>
- name: solve_with_basis
  struct_name: TaskCB
  comment: |-
    Solve a linear equation system involving a basis matrix.

    # Arguments

    - `transp_` Controls which problem formulation is solved.
    - `numnz_` Input (number of non-zeros in right-hand side).
    - `sub_` Input (indexes of non-zeros in right-hand side) and output (indexes of non-zeros in solution vector).
    - `val_` Input (right-hand side values) and output (solution vector values).

    # Returns

    - `numnzout` Output (number of non-zeros in solution vector).

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.solvewithbasis>
- name: str_to_cone_type
  struct_name: TaskCB
  comment: |-
    Obtains a cone type code.

    # Arguments

    - `str_` String corresponding to the cone type code.
    - `conetype_` The cone type corresponding to str.

    See [Conetype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.strtoconetype>
- name: str_to_sk
  struct_name: TaskCB
  comment: |-
    Obtains a status key.

    # Arguments

    - `str_` A status key abbreviation string.
    - `sk_` Status key corresponding to the string.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.strtosk>
- name: toconic
  struct_name: TaskCB
  comment: |-
    In-place reformulation of a QCQO to a conic quadratic problem.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.toconic>
- name: unlink_func_from_stream
  struct_name: TaskCB
  comment: |-
    Disconnects a user-defined function from a task stream.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.unlinkfuncfromtaskstream>
- name: update_solution_info
  struct_name: TaskCB
  comment: |-
    Update the information items related to the solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.updatesolutioninfo>
- name: which_param
  struct_name: TaskCB
  comment: |-
    Checks a parameter name.

    # Arguments

    - `parname_` Parameter name.
    - `partype_` Parameter type.

    See [Parametertype]
    - `param_` Which parameter.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.whichparam>
- name: write_b_solution
  struct_name: TaskCB
  comment: |-
    Write a binary dump of the task solution and information items.

    # Arguments

    - `filename_` A valid file name.
    - `compress_` Data compression type.

    See [Compresstype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writebsolution>
- name: write_data
  struct_name: TaskCB
  comment: |-
    Writes problem data to a file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writedata>
- name: write_json_sol
  struct_name: TaskCB
  comment: |-
    Writes a solution to a JSON file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writejsonsol>
- name: write_param_file
  struct_name: TaskCB
  comment: |-
    Writes all the parameters to a parameter file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writeparamfile>
- name: write_solution
  struct_name: TaskCB
  comment: |-
    Write a solution to a file.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writesolution>
- name: write_solution_file
  struct_name: TaskCB
  comment: |-
    Write solution file in format determined by the filename

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writesolutionfile>
- name: write_stat
  struct_name: TaskCB
  comment: |-
    Appends a record to the statistics file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writestat>
- name: write_task
  struct_name: TaskCB
  comment: |-
    Write a complete binary dump of the task data.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writetask>
- name: write_task_solver_result_file
  struct_name: TaskCB
  comment: |-
    Internal

    # Arguments

    - `filename_` A valid file name.
    - `compress_` Data compression type.

    See [Compresstype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writetasksolverresult_file>
- name: with_capacity
  struct_name: Task
  comment: Create a new task in the given environment or with the default environment with a given capacity
- name: from_env
  struct_name: Task
  comment: Create a new task in the given environment or with the default environment
- name: clone
  struct_name: Task
  comment: Create a new task in the given environment or with the default environment
- name: new
  struct_name: Task
  comment: Create a new task in the default environment
- name: with_callbacks
  struct_name: Task
  comment: |-
    This converts the Task object into a TaskCB object. The main
    difference is the the TaskCB enables attaching callback
    functions (message printing and information callbacks), and
    that it due to the callbacks cannot be shared between multiple
    threads.
- name: handle_res
  struct_name: Task
  comment: ''
- name: write_data_stream
  struct_name: Task
  comment: ''
- name: analyze_names
  struct_name: Task
  comment: |-
    Analyze the names and issue an error for the first invalid name.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `nametype_` The type of names e.g. valid in MPS or LP files.

    See [Nametype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.analyzenames>
- name: analyze_problem
  struct_name: Task
  comment: |-
    Analyze the data of a task.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.analyzeproblem>
- name: analyze_solution
  struct_name: Task
  comment: |-
    Print information related to the quality of the solution.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.analyzesolution>
- name: append_acc
  struct_name: Task
  comment: |-
    Appends an affine conic constraint to the task.

    # Arguments

    - `domidx_` Domain index.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendacc>
- name: append_accs
  struct_name: Task
  comment: |-
    Appends a number of affine conic constraint to the task.

    # Arguments

    - `domidxs_` Domain indices.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendaccs>
- name: append_acc_seq
  struct_name: Task
  comment: |-
    Appends an affine conic constraint to the task.

    # Arguments

    - `domidx_` Domain index.
    - `afeidxfirst_` Index of the first affine expression.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendaccseq>
- name: append_accs_seq
  struct_name: Task
  comment: |-
    Appends a number of affine conic constraint to the task.

    # Arguments

    - `domidxs_` Domain indices.
    - `numafeidx_` Number of affine expressions in the affine expression list (must equal the sum of dimensions of the domains).
    - `afeidxfirst_` Index of the first affine expression.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendaccsseq>
- name: append_afes
  struct_name: Task
  comment: |-
    Appends a number of empty affine expressions to the optimization task.

    # Arguments

    - `num_` Number of empty affine expressions which should be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendafes>
- name: append_barvars
  struct_name: Task
  comment: |-
    Appends semidefinite variables to the problem.

    # Arguments

    - `dim_` Dimensions of symmetric matrix variables to be added.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendbarvars>
- name: append_cone
  struct_name: Task
  comment: |-
    Appends a new conic constraint to the problem.

    # Arguments

    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `submem_` Variable subscripts of the members in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendcone>
- name: append_cone_seq
  struct_name: Task
  comment: |-
    Appends a new conic constraint to the problem.

    # Arguments

    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `nummem_` Number of member variables in the cone.
    - `j_` Index of the first variable in the conic constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendconeseq>
- name: append_cones_seq
  struct_name: Task
  comment: |-
    Appends multiple conic constraints to the problem.

    # Arguments

    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `nummem_` Numbers of member variables in the cones.
    - `j_` Index of the first variable in the first cone to be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendconesseq>
- name: append_cons
  struct_name: Task
  comment: |-
    Appends a number of constraints to the optimization task.

    # Arguments

    - `num_` Number of constraints which should be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendcons>
- name: append_djcs
  struct_name: Task
  comment: |-
    Appends a number of empty disjunctive constraints to the task.

    # Arguments

    - `num_` Number of empty disjunctive constraints which should be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appenddjcs>
- name: append_dual_exp_cone_domain
  struct_name: Task
  comment: |-
    Appends the dual exponential cone domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appenddualexpconedomain>
- name: append_dual_geo_mean_cone_domain
  struct_name: Task
  comment: |-
    Appends the dual geometric mean cone domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appenddualgeomeanconedomain>
- name: append_dual_power_cone_domain
  struct_name: Task
  comment: |-
    Appends the dual power cone domain.

    # Arguments

    - `n_` Dimension of the domain.
    - `alpha_` The sequence proportional to exponents. Must be positive.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appenddualpowerconedomain>
- name: append_primal_exp_cone_domain
  struct_name: Task
  comment: |-
    Appends the primal exponential cone domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendprimalexpconedomain>
- name: append_primal_geo_mean_cone_domain
  struct_name: Task
  comment: |-
    Appends the primal geometric mean cone domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendprimalgeomeanconedomain>
- name: append_primal_power_cone_domain
  struct_name: Task
  comment: |-
    Appends the primal power cone domain.

    # Arguments

    - `n_` Dimension of the domain.
    - `alpha_` The sequence proportional to exponents. Must be positive.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendprimalpowerconedomain>
- name: append_quadratic_cone_domain
  struct_name: Task
  comment: |-
    Appends the n dimensional quadratic cone domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendquadraticconedomain>
- name: append_r_domain
  struct_name: Task
  comment: |-
    Appends the n dimensional real number domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrdomain>
- name: append_rminus_domain
  struct_name: Task
  comment: |-
    Appends the n dimensional negative orthant to the list of domains.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrminusdomain>
- name: append_rplus_domain
  struct_name: Task
  comment: |-
    Appends the n dimensional positive orthant to the list of domains.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrplusdomain>
- name: append_r_quadratic_cone_domain
  struct_name: Task
  comment: |-
    Appends the n dimensional rotated quadratic cone domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrquadraticconedomain>
- name: append_rzero_domain
  struct_name: Task
  comment: |-
    Appends the n dimensional 0 domain.

    # Arguments

    - `n_` Dimmension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendrzerodomain>
- name: append_sparse_sym_mat
  struct_name: Task
  comment: |-
    Appends a general sparse symmetric matrix to the storage of symmetric matrices.

    # Arguments

    - `dim_` Dimension of the symmetric matrix that is appended.
    - `subi_` Row subscript in the triplets.
    - `subj_` Column subscripts in the triplets.
    - `valij_` Values of each triplet.

    # Returns

    - `idx` Unique index assigned to the inputted matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendsparsesymmat>
- name: append_sparse_sym_mat_list
  struct_name: Task
  comment: |-
    Appends a general sparse symmetric matrix to the storage of symmetric matrices.

    # Arguments

    - `dims_` Dimensions of the symmetric matrixes.
    - `nz_` Number of nonzeros for each matrix.
    - `subi_` Row subscript in the triplets.
    - `subj_` Column subscripts in the triplets.
    - `valij_` Values of each triplet.
    - `idx_` Unique index assigned to the inputted matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendsparsesymmatlist>
- name: append_svec_psd_cone_domain
  struct_name: Task
  comment: |-
    Appends the vectorized SVEC PSD cone domain.

    # Arguments

    - `n_` Dimension of the domain.

    # Returns

    - `domidx` Index of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendsvecpsdconedomain>
- name: append_vars
  struct_name: Task
  comment: |-
    Appends a number of variables to the optimization task.

    # Arguments

    - `num_` Number of variables which should be appended.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.appendvars>
- name: async_get_log
  struct_name: Task
  comment: |-
    Get the optimizer log from a remote job.

    # Arguments

    - `addr_` Address of the solver server
    - `accesstoken_` Access token string or NULL
    - `token_` Job token

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncgetlog>
- name: async_get_result
  struct_name: Task
  comment: |-
    Request a solution from a remote job.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.
    - `token_` The task token.
    - `resp_` Is the response code from the remote solver.

    See [Rescode]
    - `trm_` Is either OK or a termination response code.

    See [Rescode]

    # Returns

    - `respavailable` Indicates if a remote response is available.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncgetresult>
- name: async_optimize
  struct_name: Task
  comment: |-
    Offload the optimization task to a solver server in asynchronous mode.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.

    # Returns

    - `token` Returns the task token.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncoptimize>
- name: async_poll
  struct_name: Task
  comment: |-
    Requests information about the status of the remote job.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.
    - `token_` The task token.
    - `resp_` Is the response code from the remote solver.

    See [Rescode]
    - `trm_` Is either OK or a termination response code.

    See [Rescode]

    # Returns

    - `respavailable` Indicates if a remote response is available.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncpoll>
- name: async_stop
  struct_name: Task
  comment: |-
    Request that the job identified by the token is terminated.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.
    - `token_` The task token.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.asyncstop>
- name: basis_cond
  struct_name: Task
  comment: |-
    Computes conditioning information for the basis matrix.

    # Arguments

    - `nrmbasis_` An estimate for the 1-norm of the basis.
    - `nrminvbasis_` An estimate for the 1-norm of the inverse of the basis.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.basiscond>
- name: check_mem
  struct_name: Task
  comment: |-
    Checks the memory allocated by the task.

    # Arguments

    - `file_` File from which the function is called.
    - `line_` Line in the file from which the function is called.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.checkmemtask>
- name: chg_con_bound
  struct_name: Task
  comment: |-
    Changes the bounds for one constraint.

    # Arguments

    - `i_` Index of the constraint for which the bounds should be changed.
    - `lower_` If non-zero, then the lower bound is changed, otherwise the upper bound is changed.
    - `finite_` If non-zero, then the given value is assumed to be finite.
    - `value_` New value for the bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.chgconbound>
- name: chg_var_bound
  struct_name: Task
  comment: |-
    Changes the bounds for one variable.

    # Arguments

    - `j_` Index of the variable for which the bounds should be changed.
    - `lower_` If non-zero, then the lower bound is changed, otherwise the upper bound is changed.
    - `finite_` If non-zero, then the given value is assumed to be finite.
    - `value_` New value for the bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.chgvarbound>
- name: commit_changes
  struct_name: Task
  comment: |-
    Commits all cached problem changes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.commitchanges>
- name: delete_solution
  struct_name: Task
  comment: |-
    Undefine a solution and free the memory it uses.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.deletesolution>
- name: dual_sensitivity
  struct_name: Task
  comment: |-
    Performs sensitivity analysis on objective coefficients.

    # Arguments

    - `subj_` Indexes of objective coefficients to analyze.
    - `leftpricej_` Left shadow prices for requested coefficients.
    - `rightpricej_` Right shadow prices for requested coefficients.
    - `leftrangej_` Left range for requested coefficients.
    - `rightrangej_` Right range for requested coefficients.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.dualsensitivity>
- name: empty_afe_barf_row
  struct_name: Task
  comment: |-
    Clears a row in barF

    # Arguments

    - `afeidx_` Row index of barF.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafebarfrow>
- name: empty_afe_barf_row_list
  struct_name: Task
  comment: |-
    Clears rows in barF.

    # Arguments

    - `afeidxlist_` Indices of rows in barF to clear.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafebarfrowlist>
- name: empty_afe_f_col
  struct_name: Task
  comment: |-
    Clears a column in F.

    # Arguments

    - `varidx_` Variable index.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafefcol>
- name: empty_afe_f_col_list
  struct_name: Task
  comment: |-
    Clears columns in F.

    # Arguments

    - `varidx_` Indices of variables in F to clear.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafefcollist>
- name: empty_afe_f_row
  struct_name: Task
  comment: |-
    Clears a row in F.

    # Arguments

    - `afeidx_` Row index.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafefrow>
- name: empty_afe_f_row_list
  struct_name: Task
  comment: |-
    Clears rows in F.

    # Arguments

    - `afeidx_` Indices of rows in F to clear.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.emptyafefrowlist>
- name: evaluate_acc
  struct_name: Task
  comment: |-
    Evaluates the activity of an affine conic constraint.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidx_` The index of the affine conic constraint.
    - `activity_` The activity of the affine conic constraint. The array should have length equal to the dimension of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.evaluateacc>
- name: evaluate_accs
  struct_name: Task
  comment: |-
    Evaluates the activities of all affine conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `activity_` The activity of affine conic constraints. The array should have length equal to the sum of dimensions of all affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.evaluateaccs>
- name: generate_acc_names
  struct_name: Task
  comment: |-
    Generates systematic names for affine conic constraints.

    # Arguments

    - `sub_` Indexes of the affine conic constraints.
    - `fmt_` The variable name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generateaccnames>
- name: generate_barvar_names
  struct_name: Task
  comment: |-
    Generates systematic names for variables.

    # Arguments

    - `subj_` Indexes of the variables.
    - `fmt_` The variable name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generatebarvarnames>
- name: generate_cone_names
  struct_name: Task
  comment: |-
    Generates systematic names for cone.

    # Arguments

    - `subk_` Indexes of the cone.
    - `fmt_` The cone name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generateconenames>
- name: generate_con_names
  struct_name: Task
  comment: |-
    Generates systematic names for constraints.

    # Arguments

    - `subi_` Indexes of the constraints.
    - `fmt_` The constraint name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generateconnames>
- name: generate_djc_names
  struct_name: Task
  comment: |-
    Generates systematic names for affine conic constraints.

    # Arguments

    - `sub_` Indexes of the disjunctive constraints.
    - `fmt_` The variable name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generatedjcnames>
- name: generate_var_names
  struct_name: Task
  comment: |-
    Generates systematic names for variables.

    # Arguments

    - `subj_` Indexes of the variables.
    - `fmt_` The variable name formatting string.
    - `dims_` Dimensions in the shape.
    - `sp_` Items that should be named.
    - `namedaxisidxs_` List if named index axes
    - `names_` All axis names.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.generatevarnames>
- name: get_acc_afe_idx_list
  struct_name: Task
  comment: |-
    Obtains the list of affine expressions appearing in the affine conic constraint.

    # Arguments

    - `accidx_` Index of the affine conic constraint.
    - `afeidxlist_` List of indexes of affine expressions appearing in the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccafeidxlist>
- name: get_acc_b
  struct_name: Task
  comment: |-
    Obtains the additional constant term vector appearing in the affine conic constraint.

    # Arguments

    - `accidx_` Index of the affine conic constraint.
    - `b_` The vector b appearing in the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccb>
- name: get_acc_barf_block_triplet
  struct_name: Task
  comment: |-
    Obtains barF, implied by the ACCs, in block triplet form.

    # Arguments

    - `acc_afe_` Index of the AFE within the concatenated list of AFEs in ACCs.
    - `bar_var_` Symmetric matrix variable index.
    - `blk_row_` Block row index.
    - `blk_col_` Block column index.
    - `blk_val_` The numerical value associated with each block triplet.

    # Returns

    - `numtrip` Number of elements in the block triplet form.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccbarfblocktriplet>
- name: get_acc_barf_num_block_triplets
  struct_name: Task
  comment: |-
    Obtains an upper bound on the number of elements in the block triplet form of barf, as used within the ACCs.

    # Returns

    - `numtrip` An upper bound on the number of elements in the block triplet form of barf, as used within the ACCs.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccbarfnumblocktriplets>
- name: get_acc_domain
  struct_name: Task
  comment: |-
    Obtains the domain appearing in the affine conic constraint.

    # Arguments

    - `accidx_` The index of the affine conic constraint.

    # Returns

    - `domidx` The index of domain in the affine conic constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccdomain>
- name: get_acc_dot_y
  struct_name: Task
  comment: |-
    Obtains the doty vector for an affine conic constraint.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidx_` The index of the affine conic constraint.
    - `doty_` The dual values for this affine conic constraint. The array should have length equal to the dimension of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccdoty>
- name: get_acc_dot_y_s
  struct_name: Task
  comment: |-
    Obtains the doty vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `doty_` The dual values of affine conic constraints. The array should have length equal to the sum of dimensions of all affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccdotys>
- name: get_acc_f_numnz
  struct_name: Task
  comment: |-
    Obtains the total number of nonzeros in the ACC implied F matrix.

    # Returns

    - `accfnnz` Number of nonzeros in the F matrix implied by ACCs.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccfnumnz>
- name: get_acc_f_trip
  struct_name: Task
  comment: |-
    Obtains the F matrix (implied by the AFE ordering within the ACCs) in triplet format.

    # Arguments

    - `frow_` Row indices of nonzeros in the implied F matrix.
    - `fcol_` Column indices of nonzeros in the implied F matrix.
    - `fval_` Values of nonzero entries in the implied F matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccftrip>
- name: get_acc_g_vector
  struct_name: Task
  comment: |-
    The g vector as used within the ACCs.

    # Arguments

    - `g_` The g vector as used within the ACCs.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccgvector>
- name: get_acc_n
  struct_name: Task
  comment: |-
    Obtains the dimension of the affine conic constraint.

    # Arguments

    - `accidx_` The index of the affine conic constraint.

    # Returns

    - `n` The dimension of the affine conic constraint (equal to the dimension of its domain).

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccn>
- name: get_acc_name
  struct_name: Task
  comment: |-
    Obtains the name of an affine conic constraint.

    # Arguments

    - `accidx_` Index of an affine conic constraint.

    # Returns

    - `name` Returns the required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccname>
- name: get_acc_name_len
  struct_name: Task
  comment: |-
    Obtains the length of the name of an affine conic constraint.

    # Arguments

    - `accidx_` Index of an affine conic constraint.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccnamelen>
- name: get_acc_n_tot
  struct_name: Task
  comment: |-
    Obtains the total dimension of all affine conic constraints.

    # Returns

    - `n` The total dimension of all affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccntot>
- name: get_accs
  struct_name: Task
  comment: |-
    Obtains full data of all affine conic constraints.

    # Arguments

    - `domidxlist_` The list of domains appearing in all affine conic constraints.
    - `afeidxlist_` The concatenation of index lists of affine expressions appearing in all affine conic constraints.
    - `b_` The concatenation of vectors b appearing in all affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaccs>
- name: get_a_col
  struct_name: Task
  comment: |-
    Obtains one column of the linear constraint matrix.

    # Arguments

    - `j_` Index of the column.
    - `nzj_` Number of non-zeros in the column obtained.
    - `subj_` Row indices of the non-zeros in the column obtained.
    - `valj_` Numerical values in the column obtained.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacol>
- name: get_a_col_num_nz
  struct_name: Task
  comment: |-
    Obtains the number of non-zero elements in one column of the linear constraint matrix

    # Arguments

    - `i_` Index of the column.

    # Returns

    - `nzj` Number of non-zeros in the j'th column of (A).

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacolnumnz>
- name: get_a_col_slice
  struct_name: Task
  comment: |-
    Obtains a sequence of columns from the coefficient matrix.

    # Arguments

    - `first_` Index of the first column in the sequence.
    - `last_` Index of the last column in the sequence plus one.
    - `ptrb_` Column start pointers.
    - `ptre_` Column end pointers.
    - `sub_` Contains the row subscripts.
    - `val_` Contains the coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacolslice64>
- name: get_a_col_slice_num_nz
  struct_name: Task
  comment: |-
    Obtains the number of non-zeros in a slice of columns of the coefficient matrix.

    # Arguments

    - `first_` Index of the first column in the sequence.
    - `last_` Index of the last column plus one in the sequence.

    # Returns

    - `numnz` Number of non-zeros in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacolslicenumnz64>
- name: get_a_col_slice_trip
  struct_name: Task
  comment: |-
    Obtains a sequence of columns from the coefficient matrix in triplet format.

    # Arguments

    - `first_` Index of the first column in the sequence.
    - `last_` Index of the last column in the sequence plus one.
    - `subi_` Constraint subscripts.
    - `subj_` Column subscripts.
    - `val_` Values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getacolslicetrip>
- name: get_afe_barf_block_triplet
  struct_name: Task
  comment: |-
    Obtains barF in block triplet form.

    # Arguments

    - `afeidx_` Constraint index.
    - `barvaridx_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valkl_` The numerical value associated with each block triplet.

    # Returns

    - `numtrip` Number of elements in the block triplet form.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfblocktriplet>
- name: get_afe_barf_num_block_triplets
  struct_name: Task
  comment: |-
    Obtains an upper bound on the number of elements in the block triplet form of barf.

    # Returns

    - `numtrip` An upper bound on the number of elements in the block triplet form of barf.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfnumblocktriplets>
- name: get_afe_barf_num_row_entries
  struct_name: Task
  comment: |-
    Obtains the number of nonzero entries in a row of barF.

    # Arguments

    - `afeidx_` Row index of barF.

    # Returns

    - `numentr` Number of nonzero entries in a row of barF.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfnumrowentries>
- name: get_afe_barf_row
  struct_name: Task
  comment: |-
    Obtains nonzero entries in one row of barF.

    # Arguments

    - `afeidx_` Row index of barF.
    - `barvaridx_` Semidefinite variable indices.
    - `ptrterm_` Pointers to the description of entries.
    - `numterm_` Number of terms in each entry.
    - `termidx_` Indices of semidefinite matrices from E.
    - `termweight_` Weights appearing in the weighted sum representation.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfrow>
- name: get_afe_barf_row_info
  struct_name: Task
  comment: |-
    Obtains information about one row of barF.

    # Arguments

    - `afeidx_` Row index of barF.
    - `numentr_` Number of nonzero entries in a row of barF.
    - `numterm_` Number of terms in the weighted sums representation of the row of barF.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafebarfrowinfo>
- name: get_afe_f_num_nz
  struct_name: Task
  comment: |-
    Obtains the total number of nonzeros in F.

    # Returns

    - `numnz` Number of nonzeros in F.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafefnumnz>
- name: get_afe_f_row
  struct_name: Task
  comment: |-
    Obtains one row of F in sparse format.

    # Arguments

    - `afeidx_` Row index.
    - `numnz_` Number of non-zeros in the row obtained.
    - `varidx_` Column indices of the non-zeros in the row obtained.
    - `val_` Values of the non-zeros in the row obtained.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafefrow>
- name: get_afe_f_row_num_nz
  struct_name: Task
  comment: |-
    Obtains the number of nonzeros in a row of F.

    # Arguments

    - `afeidx_` Row index.

    # Returns

    - `numnz` Number of non-zeros in the row.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafefrownumnz>
- name: get_afe_f_trip
  struct_name: Task
  comment: |-
    Obtains the F matrix in triplet format.

    # Arguments

    - `afeidx_` Row indices of nonzeros.
    - `varidx_` Column indices of nonzeros.
    - `val_` Values of nonzero entries.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafeftrip>
- name: get_afe_g
  struct_name: Task
  comment: |-
    Obtains a single coefficient in g.

    # Arguments

    - `afeidx_` Element index.

    # Returns

    - `g` The entry in g.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafeg>
- name: get_afe_g_slice
  struct_name: Task
  comment: |-
    Obtains a sequence of coefficients from the vector g.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `g_` The slice of g as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getafegslice>
- name: get_aij
  struct_name: Task
  comment: |-
    Obtains a single coefficient in linear constraint matrix.

    # Arguments

    - `i_` Row index of the coefficient to be returned.
    - `j_` Column index of the coefficient to be returned.

    # Returns

    - `aij` Returns the requested coefficient.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getaij>
- name: get_a_piece_num_nz
  struct_name: Task
  comment: |-
    Obtains the number non-zeros in a rectangular piece of the linear constraint matrix.

    # Arguments

    - `firsti_` Index of the first row in the rectangular piece.
    - `lasti_` Index of the last row plus one in the rectangular piece.
    - `firstj_` Index of the first column in the rectangular piece.
    - `lastj_` Index of the last column plus one in the rectangular piece.

    # Returns

    - `numnz` Number of non-zero elements in the rectangular piece of the linear constraint matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getapiecenumnz>
- name: get_a_row
  struct_name: Task
  comment: |-
    Obtains one row of the linear constraint matrix.

    # Arguments

    - `i_` Index of the row.
    - `nzi_` Number of non-zeros in the row obtained.
    - `subi_` Column indices of the non-zeros in the row obtained.
    - `vali_` Numerical values of the row obtained.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarow>
- name: get_a_row_num_nz
  struct_name: Task
  comment: |-
    Obtains the number of non-zero elements in one row of the linear constraint matrix

    # Arguments

    - `i_` Index of the row.

    # Returns

    - `nzi` Number of non-zeros in the i'th row of `A`.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarownumnz>
- name: get_a_row_slice
  struct_name: Task
  comment: |-
    Obtains a sequence of rows from the coefficient matrix.

    # Arguments

    - `first_` Index of the first row in the sequence.
    - `last_` Index of the last row in the sequence plus one.
    - `ptrb_` Row start pointers.
    - `ptre_` Row end pointers.
    - `sub_` Contains the column subscripts.
    - `val_` Contains the coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarowslice64>
- name: get_a_row_slice_num_nz
  struct_name: Task
  comment: |-
    Obtains the number of non-zeros in a slice of rows of the coefficient matrix.

    # Arguments

    - `first_` Index of the first row in the sequence.
    - `last_` Index of the last row plus one in the sequence.

    # Returns

    - `numnz` Number of non-zeros in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarowslicenumnz64>
- name: get_a_row_slice_trip
  struct_name: Task
  comment: |-
    Obtains a sequence of rows from the coefficient matrix in sparse triplet format.

    # Arguments

    - `first_` Index of the first row in the sequence.
    - `last_` Index of the last row in the sequence plus one.
    - `subi_` Constraint subscripts.
    - `subj_` Column subscripts.
    - `val_` Values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getarowslicetrip>
- name: get_a_trip
  struct_name: Task
  comment: |-
    Obtains the A matrix in sparse triplet format.

    # Arguments

    - `subi_` Constraint subscripts.
    - `subj_` Column subscripts.
    - `val_` Values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getatrip>
- name: get_a_truncate_tol
  struct_name: Task
  comment: |-
    Gets the current A matrix truncation threshold.

    # Arguments

    - `tolzero_` Truncation tolerance.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getatruncatetol>
- name: get_bara_block_triplet
  struct_name: Task
  comment: |-
    Obtains barA in block triplet form.

    # Arguments

    - `subi_` Constraint index.
    - `subj_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valijkl_` The numerical value associated with each block triplet.

    # Returns

    - `num` Number of elements in the block triplet form.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarablocktriplet>
- name: get_bara_idx
  struct_name: Task
  comment: |-
    Obtains information about an element in barA.

    # Arguments

    - `idx_` Position of the element in the vectorized form.
    - `i_` Row index of the element at position idx.
    - `j_` Column index of the element at position idx.
    - `sub_` A list indexes of the elements from symmetric matrix storage that appear in the weighted sum.
    - `weights_` The weights associated with each term in the weighted sum.

    # Returns

    - `num` Number of terms in weighted sum that forms the element.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbaraidx>
- name: get_bara_idx_i_j
  struct_name: Task
  comment: |-
    Obtains information about an element in barA.

    # Arguments

    - `idx_` Position of the element in the vectorized form.
    - `i_` Row index of the element at position idx.
    - `j_` Column index of the element at position idx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbaraidxij>
- name: get_bara_idx_info
  struct_name: Task
  comment: |-
    Obtains the number of terms in the weighted sum that form a particular element in barA.

    # Arguments

    - `idx_` The internal position of the element for which information should be obtained.

    # Returns

    - `num` Number of terms in the weighted sum that form the specified element in barA.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbaraidxinfo>
- name: get_bara_sparsity
  struct_name: Task
  comment: |-
    Obtains the sparsity pattern of the barA matrix.

    # Arguments

    - `numnz_` Number of nonzero elements in barA.
    - `idxij_` Position of each nonzero element in the vector representation of barA.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarasparsity>
- name: get_barc_block_triplet
  struct_name: Task
  comment: |-
    Obtains barC in block triplet form.

    # Arguments

    - `subj_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valjkl_` The numerical value associated with each block triplet.

    # Returns

    - `num` Number of elements in the block triplet form.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcblocktriplet>
- name: get_barc_idx
  struct_name: Task
  comment: |-
    Obtains information about an element in barc.

    # Arguments

    - `idx_` Index of the element for which information should be obtained.
    - `j_` Row index in barc.
    - `num_` Number of terms in the weighted sum.
    - `sub_` Elements appearing the weighted sum.
    - `weights_` Weights of terms in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcidx>
- name: get_barc_idx_info
  struct_name: Task
  comment: |-
    Obtains information about an element in barc.

    # Arguments

    - `idx_` Index of the element for which information should be obtained. The value is an index of a symmetric sparse variable.

    # Returns

    - `num` Number of terms that appear in the weighted sum that forms the requested element.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcidxinfo>
- name: get_barc_idx_j
  struct_name: Task
  comment: |-
    Obtains the row index of an element in barc.

    # Arguments

    - `idx_` Index of the element for which information should be obtained.
    - `j_` Row index in barc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcidxj>
- name: get_barc_sparsity
  struct_name: Task
  comment: |-
    Get the positions of the nonzero elements in barc.

    # Arguments

    - `numnz_` Number of nonzero elements in barc.
    - `idxj_` Internal positions of the nonzeros elements in barc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarcsparsity>
- name: get_bars_j
  struct_name: Task
  comment: |-
    Obtains the dual solution for a semidefinite variable.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `j_` Index of the semidefinite variable.
    - `barsj_` Value of the j'th dual variable of barx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarsj>
- name: get_bars_slice
  struct_name: Task
  comment: |-
    Obtains the dual solution for a sequence of semidefinite variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` Index of the first semidefinite variable in the slice.
    - `last_` Index of the last semidefinite variable in the slice plus one.
    - `slicesize_` Denotes the length of the array barsslice.
    - `barsslice_` Dual solution values of symmetric matrix variables in the slice, stored sequentially.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarsslice>
- name: get_barvar_name
  struct_name: Task
  comment: |-
    Obtains the name of a semidefinite variable.

    # Arguments

    - `i_` Index of the variable.

    # Returns

    - `name` The requested name is copied to this buffer.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarvarname>
- name: get_barvar_name_index
  struct_name: Task
  comment: |-
    Obtains the index of semidefinite variable from its name.

    # Arguments

    - `somename_` The name of the variable.
    - `asgn_` Non-zero if the name somename is assigned to some semidefinite variable.

    # Returns

    - `index` The index of a semidefinite variable with the name somename (if one exists).

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarvarnameindex>
- name: get_barvar_name_len
  struct_name: Task
  comment: |-
    Obtains the length of the name of a semidefinite variable.

    # Arguments

    - `i_` Index of the variable.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarvarnamelen>
- name: get_barx_j
  struct_name: Task
  comment: |-
    Obtains the primal solution for a semidefinite variable.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `j_` Index of the semidefinite variable.
    - `barxj_` Value of the j'th variable of barx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarxj>
- name: get_barx_slice
  struct_name: Task
  comment: |-
    Obtains the primal solution for a sequence of semidefinite variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` Index of the first semidefinite variable in the slice.
    - `last_` Index of the last semidefinite variable in the slice plus one.
    - `slicesize_` Denotes the length of the array barxslice.
    - `barxslice_` Solution values of symmetric matrix variables in the slice, stored sequentially.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getbarxslice>
- name: get_c
  struct_name: Task
  comment: |-
    Obtains all objective coefficients.

    # Arguments

    - `c_` Linear terms of the objective as a dense vector. The length is the number of variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getc>
- name: get_cfix
  struct_name: Task
  comment: |-
    Obtains the fixed term in the objective.

    # Returns

    - `cfix` Fixed term in the objective.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcfix>
- name: get_c_j
  struct_name: Task
  comment: |-
    Obtains one objective coefficient.

    # Arguments

    - `j_` Index of the variable for which the c coefficient should be obtained.
    - `cj_` The c coefficient value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcj>
- name: get_c_list
  struct_name: Task
  comment: |-
    Obtains a sequence of coefficients from the objective.

    # Arguments

    - `subj_` A list of variable indexes.
    - `c_` Linear terms of the requested list of the objective as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getclist>
- name: get_con_bound
  struct_name: Task
  comment: |-
    Obtains bound information for one constraint.

    # Arguments

    - `i_` Index of the constraint for which the bound information should be obtained.
    - `bk_` Bound keys.

    See [Boundkey]
    - `bl_` Values for lower bounds.
    - `bu_` Values for upper bounds.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconbound>
- name: get_con_bound_slice
  struct_name: Task
  comment: |-
    Obtains bounds information for a slice of the constraints.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bk_` Bound keys.

    See [Boundkey]
    - `bl_` Values for lower bounds.
    - `bu_` Values for upper bounds.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconboundslice>
- name: get_cone
  struct_name: Task
  comment: |-
    Obtains a cone.

    # Arguments

    - `k_` Index of the cone.
    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `nummem_` Number of member variables in the cone.
    - `submem_` Variable subscripts of the members in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcone>
- name: get_cone_info
  struct_name: Task
  comment: |-
    Obtains information about a cone.

    # Arguments

    - `k_` Index of the cone.
    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `nummem_` Number of member variables in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconeinfo>
- name: get_cone_name
  struct_name: Task
  comment: |-
    Obtains the name of a cone.

    # Arguments

    - `i_` Index of the cone.

    # Returns

    - `name` The required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconename>
- name: get_cone_name_index
  struct_name: Task
  comment: |-
    Checks whether the name has been assigned to any cone.

    # Arguments

    - `somename_` The name which should be checked.
    - `asgn_` Is non-zero if the name somename is assigned to some cone.

    # Returns

    - `index` If the name somename is assigned to some cone, this is the index of the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconenameindex>
- name: get_cone_name_len
  struct_name: Task
  comment: |-
    Obtains the length of the name of a cone.

    # Arguments

    - `i_` Index of the cone.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconenamelen>
- name: get_con_name
  struct_name: Task
  comment: |-
    Obtains the name of a constraint.

    # Arguments

    - `i_` Index of the constraint.

    # Returns

    - `name` The required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconname>
- name: get_con_name_index
  struct_name: Task
  comment: |-
    Checks whether the name has been assigned to any constraint.

    # Arguments

    - `somename_` The name which should be checked.
    - `asgn_` Is non-zero if the name somename is assigned to some constraint.

    # Returns

    - `index` If the name somename is assigned to a constraint, then return the index of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconnameindex>
- name: get_con_name_len
  struct_name: Task
  comment: |-
    Obtains the length of the name of a constraint.

    # Arguments

    - `i_` Index of the constraint.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getconnamelen>
- name: get_c_slice
  struct_name: Task
  comment: |-
    Obtains a sequence of coefficients from the objective.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `c_` Linear terms of the requested slice of the objective as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getcslice>
- name: get_dim_barvar_j
  struct_name: Task
  comment: |-
    Obtains the dimension of a symmetric matrix variable.

    # Arguments

    - `j_` Index of the semidefinite variable whose dimension is requested.

    # Returns

    - `dimbarvarj` The dimension of the j'th semidefinite variable.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdimbarvarj>
- name: get_djc_afe_idx_list
  struct_name: Task
  comment: |-
    Obtains the list of affine expression indexes in a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `afeidxlist_` List of affine expression indexes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcafeidxlist>
- name: get_djc_b
  struct_name: Task
  comment: |-
    Obtains the optional constant term vector of a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `b_` The vector b.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcb>
- name: get_djc_domain_idx_list
  struct_name: Task
  comment: |-
    Obtains the list of domain indexes in a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `domidxlist_` List of term sizes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcdomainidxlist>
- name: get_djc_name
  struct_name: Task
  comment: |-
    Obtains the name of a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of a disjunctive constraint.

    # Returns

    - `name` Returns the required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcname>
- name: get_djc_name_len
  struct_name: Task
  comment: |-
    Obtains the length of the name of a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of a disjunctive constraint.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnamelen>
- name: get_djc_num_afe
  struct_name: Task
  comment: |-
    Obtains the number of affine expressions in the disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.

    # Returns

    - `numafe` Number of affine expressions in the disjunctive constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumafe>
- name: get_djc_num_afe_tot
  struct_name: Task
  comment: |-
    Obtains the number of affine expressions in all disjunctive constraints.

    # Returns

    - `numafetot` Number of affine expressions in all disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumafetot>
- name: get_djc_num_domain
  struct_name: Task
  comment: |-
    Obtains the number of domains in the disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.

    # Returns

    - `numdomain` Number of domains in the disjunctive constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumdomain>
- name: get_djc_num_domain_tot
  struct_name: Task
  comment: |-
    Obtains the number of domains in all disjunctive constraints.

    # Returns

    - `numdomaintot` Number of domains in all disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumdomaintot>
- name: get_djc_num_term
  struct_name: Task
  comment: |-
    Obtains the number terms in the disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.

    # Returns

    - `numterm` Number of terms in the disjunctive constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumterm>
- name: get_djc_num_term_tot
  struct_name: Task
  comment: |-
    Obtains the number of terms in all disjunctive constraints.

    # Returns

    - `numtermtot` Total number of terms in all disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcnumtermtot>
- name: get_djcs
  struct_name: Task
  comment: |-
    Obtains full data of all disjunctive constraints.

    # Arguments

    - `domidxlist_` The concatenation of index lists of domains appearing in all disjunctive constraints.
    - `afeidxlist_` The concatenation of index lists of affine expressions appearing in all disjunctive constraints.
    - `b_` The concatenation of vectors b appearing in all disjunctive constraints.
    - `termsizelist_` The concatenation of lists of term sizes appearing in all disjunctive constraints.
    - `numterms_` The number of terms in each of the disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjcs>
- name: get_djc_term_size_list
  struct_name: Task
  comment: |-
    Obtains the list of term sizes in a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `termsizelist_` List of term sizes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdjctermsizelist>
- name: get_domain_n
  struct_name: Task
  comment: |-
    Obtains the dimension of the domain.

    # Arguments

    - `domidx_` Index of the domain.

    # Returns

    - `n` Dimension of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdomainn>
- name: get_domain_name
  struct_name: Task
  comment: |-
    Obtains the name of a domain.

    # Arguments

    - `domidx_` Index of a domain.

    # Returns

    - `name` Returns the required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdomainname>
- name: get_domain_name_len
  struct_name: Task
  comment: |-
    Obtains the length of the name of a domain.

    # Arguments

    - `domidx_` Index of a domain.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdomainnamelen>
- name: get_domain_type
  struct_name: Task
  comment: |-
    Returns the type of the domain.

    # Arguments

    - `domidx_` Index of the domain.

    # Returns

    - `domtype` The type of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdomaintype>
- name: get_dou_inf
  struct_name: Task
  comment: |-
    Obtains a double information item.

    # Arguments

    - `whichdinf_` Specifies a double information item.

    See [Dinfitem]

    # Returns

    - `dvalue` The value of the required double information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdouinf>
- name: get_dou_param
  struct_name: Task
  comment: |-
    Obtains a double parameter.

    # Arguments

    - `param_` Which parameter.

    See [Dparam]

    # Returns

    - `parvalue` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdouparam>
- name: get_dual_obj
  struct_name: Task
  comment: |-
    Computes the dual objective value associated with the solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `dualobj_` Objective value corresponding to the dual solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdualobj>
- name: get_dual_solution_norms
  struct_name: Task
  comment: |-
    Compute norms of the dual solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `nrmy_` The norm of the y vector.
    - `nrmslc_` The norm of the slc vector.
    - `nrmsuc_` The norm of the suc vector.
    - `nrmslx_` The norm of the slx vector.
    - `nrmsux_` The norm of the sux vector.
    - `nrmsnx_` The norm of the snx vector.
    - `nrmbars_` The norm of the bars vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdualsolutionnorms>
- name: get_dviol_acc
  struct_name: Task
  comment: |-
    Computes the violation of the dual solution for set of affine conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidxlist_` An array of indexes of conic constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolacc>
- name: get_dviol_barvar
  struct_name: Task
  comment: |-
    Computes the violation of dual solution for a set of semidefinite variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of barx variables.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolbarvar>
- name: get_dviol_con
  struct_name: Task
  comment: |-
    Computes the violation of a dual solution associated with a set of constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolcon>
- name: get_dviol_cones
  struct_name: Task
  comment: |-
    Computes the violation of a solution for set of dual conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of conic constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolcones>
- name: get_dviol_var
  struct_name: Task
  comment: |-
    Computes the violation of a dual solution associated with a set of scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of x variables.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getdviolvar>
- name: get_inf_index
  struct_name: Task
  comment: |-
    Obtains the index of a named information item.

    # Arguments

    - `inftype_` Type of the information item.

    See [Inftype]
    - `infname_` Name of the information item.
    - `infindex_` The item index.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getinfindex>
- name: get_inf_max
  struct_name: Task
  comment: |-
    Obtains the maximum index of an information item of a given type.

    # Arguments

    - `inftype_` Type of the information item.

    See [Inftype]
    - `infmax_` The maximum index (plus 1) requested.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getinfmax>
- name: get_inf_name
  struct_name: Task
  comment: |-
    Obtains the name of an information item.

    # Arguments

    - `inftype_` Type of the information item.

    See [Inftype]
    - `whichinf_` An information item.

    # Returns

    - `infname` Name of the information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getinfname>
- name: get_int_inf
  struct_name: Task
  comment: |-
    Obtains an integer information item.

    # Arguments

    - `whichiinf_` Specifies an integer information item.

    See [Iinfitem]

    # Returns

    - `ivalue` The value of the required integer information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getintinf>
- name: get_int_param
  struct_name: Task
  comment: |-
    Obtains an integer parameter.

    # Arguments

    - `param_` Which parameter.

    See [Iparam]

    # Returns

    - `parvalue` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getintparam>
- name: get_len_barvar_j
  struct_name: Task
  comment: |-
    Obtains the length of one semidefinite variable.

    # Arguments

    - `j_` Index of the semidefinite variable whose length if requested.

    # Returns

    - `lenbarvarj` Number of scalar elements in the lower triangular part of the semidefinite variable.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getlenbarvarj>
- name: get_lint_inf
  struct_name: Task
  comment: |-
    Obtains a long integer information item.

    # Arguments

    - `whichliinf_` Specifies a long information item.

    See [Liinfitem]

    # Returns

    - `ivalue` The value of the required long integer information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getlintinf>
- name: get_max_name_len
  struct_name: Task
  comment: |-
    Obtains the maximum length (not including terminating zero character) of any objective, constraint, variable, domain or cone name.

    # Arguments

    - `maxlen_` The maximum length of any name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnamelen>
- name: get_max_num_a_nz
  struct_name: Task
  comment: |-
    Obtains number of preallocated non-zeros in the linear constraint matrix.

    # Returns

    - `maxnumanz` Number of preallocated non-zero linear matrix elements.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumanz64>
- name: get_max_num_barvar
  struct_name: Task
  comment: |-
    Obtains maximum number of symmetric matrix variables for which space is currently preallocated.

    # Returns

    - `maxnumbarvar` Maximum number of symmetric matrix variables for which space is currently preallocated.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumbarvar>
- name: get_max_num_con
  struct_name: Task
  comment: |-
    Obtains the number of preallocated constraints in the optimization task.

    # Arguments

    - `maxnumcon_` Number of preallocated constraints in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumcon>
- name: get_max_num_cone
  struct_name: Task
  comment: |-
    Obtains the number of preallocated cones in the optimization task.

    # Arguments

    - `maxnumcone_` Number of preallocated conic constraints in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumcone>
- name: get_max_num_q_nz
  struct_name: Task
  comment: |-
    Obtains the number of preallocated non-zeros for all quadratic terms in objective and constraints.

    # Arguments

    - `maxnumqnz_` Number of non-zero elements preallocated in quadratic coefficient matrices.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumqnz64>
- name: get_max_num_var
  struct_name: Task
  comment: |-
    Obtains the maximum number variables allowed.

    # Arguments

    - `maxnumvar_` Number of preallocated variables in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmaxnumvar>
- name: get_mem_usage
  struct_name: Task
  comment: |-
    Obtains information about the amount of memory used by a task.

    # Arguments

    - `meminuse_` Amount of memory currently used by the task.
    - `maxmemuse_` Maximum amount of memory used by the task until now.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmemusagetask>
- name: get_mio_num_threads
  struct_name: Task
  comment: |-
    Obtains the number of threads used by the mixed integer optimizer.

    # Returns

    - `numthreads` The number of threads.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getmionumthreads>
- name: get_na_dou_inf
  struct_name: Task
  comment: |-
    Obtains a named double information item.

    # Arguments

    - `infitemname_` The name of a double information item.
    - `dvalue_` The value of the required double information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnadouinf>
- name: get_na_dou_param
  struct_name: Task
  comment: |-
    Obtains a double parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnadouparam>
- name: get_na_int_inf
  struct_name: Task
  comment: |-
    Obtains a named integer information item.

    # Arguments

    - `infitemname_` The name of an integer information item.
    - `ivalue_` The value of the required integer information item.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnaintinf>
- name: get_na_int_param
  struct_name: Task
  comment: |-
    Obtains an integer parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnaintparam>
- name: get_na_str_param
  struct_name: Task
  comment: |-
    Obtains a string parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `sizeparamname_` Size of the name buffer.
    - `len_` Returns the length of the parameter value.

    # Returns

    - `parvalue` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnastrparam>
- name: get_num_acc
  struct_name: Task
  comment: |-
    Obtains the number of affine conic constraints.

    # Returns

    - `num` The number of affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumacc>
- name: get_num_afe
  struct_name: Task
  comment: |-
    Obtains the number of affine expressions.

    # Returns

    - `numafe` Number of affine expressions.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumafe>
- name: get_num_a_nz
  struct_name: Task
  comment: |-
    Obtains the number of non-zeros in the coefficient matrix.

    # Returns

    - `numanz` Number of non-zero elements in the linear constraint matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumanz>
- name: get_num_a_nz_64
  struct_name: Task
  comment: |-
    Obtains the number of non-zeros in the coefficient matrix.

    # Returns

    - `numanz` Number of non-zero elements in the linear constraint matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumanz64>
- name: get_num_bara_block_triplets
  struct_name: Task
  comment: |-
    Obtains an upper bound on the number of scalar elements in the block triplet form of bara.

    # Returns

    - `num` An upper bound on the number of elements in the block triplet form of bara.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbarablocktriplets>
- name: get_num_bara_nz
  struct_name: Task
  comment: |-
    Get the number of nonzero elements in barA.

    # Returns

    - `nz` The number of nonzero block elements in barA.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbaranz>
- name: get_num_barc_block_triplets
  struct_name: Task
  comment: |-
    Obtains an upper bound on the number of elements in the block triplet form of barc.

    # Returns

    - `num` An upper bound on the number of elements in the block triplet form of barc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbarcblocktriplets>
- name: get_num_barc_nz
  struct_name: Task
  comment: |-
    Obtains the number of nonzero elements in barc.

    # Returns

    - `nz` The number of nonzero elements in barc.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbarcnz>
- name: get_num_barvar
  struct_name: Task
  comment: |-
    Obtains the number of semidefinite variables.

    # Returns

    - `numbarvar` Number of semidefinite variables in the problem.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumbarvar>
- name: get_num_con
  struct_name: Task
  comment: |-
    Obtains the number of constraints.

    # Returns

    - `numcon` Number of constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumcon>
- name: get_num_cone
  struct_name: Task
  comment: |-
    Obtains the number of cones.

    # Returns

    - `numcone` Number of conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumcone>
- name: get_num_cone_mem
  struct_name: Task
  comment: |-
    Obtains the number of members in a cone.

    # Arguments

    - `k_` Index of the cone.
    - `nummem_` Number of member variables in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumconemem>
- name: get_num_djc
  struct_name: Task
  comment: |-
    Obtains the number of disjunctive constraints.

    # Returns

    - `num` The number of disjunctive constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumdjc>
- name: get_num_domain
  struct_name: Task
  comment: |-
    Obtain the number of domains defined.

    # Returns

    - `numdomain` Number of domains in the task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumdomain>
- name: get_num_int_var
  struct_name: Task
  comment: |-
    Obtains the number of integer-constrained variables.

    # Returns

    - `numintvar` Number of integer variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumintvar>
- name: get_num_param
  struct_name: Task
  comment: |-
    Obtains the number of parameters of a given type.

    # Arguments

    - `partype_` Parameter type.

    See [Parametertype]
    - `numparam_` Returns the number of parameters of the requested type.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumparam>
- name: get_num_q_con_k_nz
  struct_name: Task
  comment: |-
    Obtains the number of non-zero quadratic terms in a constraint.

    # Arguments

    - `k_` Index of the constraint for which the number quadratic terms should be obtained.

    # Returns

    - `numqcnz` Number of quadratic terms.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumqconknz64>
- name: get_num_q_obj_nz
  struct_name: Task
  comment: |-
    Obtains the number of non-zero quadratic terms in the objective.

    # Returns

    - `numqonz` Number of non-zero elements in the quadratic objective terms.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumqobjnz64>
- name: get_num_sym_mat
  struct_name: Task
  comment: |-
    Obtains the number of symmetric matrices stored.

    # Arguments

    - `num_` The number of symmetric sparse matrices.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumsymmat>
- name: get_num_var
  struct_name: Task
  comment: |-
    Obtains the number of variables.

    # Returns

    - `numvar` Number of variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getnumvar>
- name: get_obj_name
  struct_name: Task
  comment: |-
    Obtains the name assigned to the objective function.

    # Returns

    - `objname` Assigned the objective name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getobjname>
- name: get_obj_name_len
  struct_name: Task
  comment: |-
    Obtains the length of the name assigned to the objective function.

    # Returns

    - `len` Assigned the length of the objective name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getobjnamelen>
- name: get_obj_sense
  struct_name: Task
  comment: |-
    Gets the objective sense.

    # Returns

    - `sense` The returned objective sense.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getobjsense>
- name: get_param_max
  struct_name: Task
  comment: |-
    Obtains the maximum index of a parameter of a given type.

    # Arguments

    - `partype_` Parameter type.

    See [Parametertype]
    - `parammax_` The maximum index (plus 1) of the given parameter type.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getparammax>
- name: get_param_name
  struct_name: Task
  comment: |-
    Obtains the name of a parameter.

    # Arguments

    - `partype_` Parameter type.

    See [Parametertype]
    - `param_` Which parameter.

    # Returns

    - `parname` Parameter name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getparamname>
- name: get_power_domain_alpha
  struct_name: Task
  comment: |-
    Obtains the exponent vector of a power domain.

    # Arguments

    - `domidx_` Index of the domain.
    - `alpha_` The exponent vector of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpowerdomainalpha>
- name: get_power_domain_info
  struct_name: Task
  comment: |-
    Obtains structural information about a power domain.

    # Arguments

    - `domidx_` Index of the domain.
    - `n_` Dimension of the domain.
    - `nleft_` Number of variables on the left hand side.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpowerdomaininfo>
- name: get_primal_obj
  struct_name: Task
  comment: |-
    Computes the primal objective value for the desired solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    # Returns

    - `primalobj` Objective value corresponding to the primal solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getprimalobj>
- name: get_primal_solution_norms
  struct_name: Task
  comment: |-
    Compute norms of the primal solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `nrmxc_` The norm of the xc vector.
    - `nrmxx_` The norm of the xx vector.
    - `nrmbarx_` The norm of the barX vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getprimalsolutionnorms>
- name: get_prob_type
  struct_name: Task
  comment: |-
    Obtains the problem type.

    # Returns

    - `probtype` The problem type.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getprobtype>
- name: get_pro_sta
  struct_name: Task
  comment: |-
    Obtains the problem status.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    # Returns

    - `problemsta` Problem status.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getprosta>
- name: get_pviol_acc
  struct_name: Task
  comment: |-
    Computes the violation of a solution for set of affine conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidxlist_` An array of indexes of conic constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolacc>
- name: get_pviol_barvar
  struct_name: Task
  comment: |-
    Computes the violation of a primal solution for a list of semidefinite variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of barX variables.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolbarvar>
- name: get_pviol_con
  struct_name: Task
  comment: |-
    Computes the violation of a primal solution associated to a constraint.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolcon>
- name: get_pviol_cones
  struct_name: Task
  comment: |-
    Computes the violation of a solution for set of conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of conic constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolcones>
- name: get_pviol_djc
  struct_name: Task
  comment: |-
    Computes the violation of a solution for set of disjunctive constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `djcidxlist_` An array of indexes of disjunctive constraints.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpvioldjc>
- name: get_pviol_var
  struct_name: Task
  comment: |-
    Computes the violation of a primal solution for a list of scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sub_` An array of indexes of x variables.
    - `viol_` List of violations corresponding to sub.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getpviolvar>
- name: get_q_con_k
  struct_name: Task
  comment: |-
    Obtains all the quadratic terms in a constraint.

    # Arguments

    - `k_` Which constraint.
    - `qcsubi_` Row subscripts for quadratic constraint matrix.
    - `qcsubj_` Column subscripts for quadratic constraint matrix.
    - `qcval_` Quadratic constraint coefficient values.

    # Returns

    - `numqcnz` Number of quadratic terms.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getqconk64>
- name: get_q_obj
  struct_name: Task
  comment: |-
    Obtains all the quadratic terms in the objective.

    # Arguments

    - `numqonz_` Number of non-zero elements in the quadratic objective terms.
    - `qosubi_` Row subscripts for quadratic objective coefficients.
    - `qosubj_` Column subscripts for quadratic objective coefficients.
    - `qoval_` Quadratic objective coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getqobj64>
- name: get_q_obj_i_j
  struct_name: Task
  comment: |-
    Obtains one coefficient from the quadratic term of the objective

    # Arguments

    - `i_` Row index of the coefficient.
    - `j_` Column index of coefficient.
    - `qoij_` The required coefficient.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getqobjij>
- name: get_reduced_costs
  struct_name: Task
  comment: |-
    Obtains the reduced costs for a sequence of variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` The index of the first variable in the sequence.
    - `last_` The index of the last variable in the sequence plus 1.
    - `redcosts_` Returns the requested reduced costs.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getreducedcosts>
- name: get_skc
  struct_name: Task
  comment: |-
    Obtains the status keys for the constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skc_` Status keys for the constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskc>
- name: get_skc_slice
  struct_name: Task
  comment: |-
    Obtains the status keys for a slice of the constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `skc_` Status keys for the constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskcslice>
- name: get_skn
  struct_name: Task
  comment: |-
    Obtains the status keys for the conic constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskn>
- name: get_skx
  struct_name: Task
  comment: |-
    Obtains the status keys for the scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skx_` Status keys for the variables.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskx>
- name: get_skx_slice
  struct_name: Task
  comment: |-
    Obtains the status keys for a slice of the scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `skx_` Status keys for the variables.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getskxslice>
- name: get_slc
  struct_name: Task
  comment: |-
    Obtains the slc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getslc>
- name: get_slc_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the slc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getslcslice>
- name: get_slx
  struct_name: Task
  comment: |-
    Obtains the slx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `slx_` Dual variables corresponding to the lower bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getslx>
- name: get_slx_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the slx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getslxslice>
- name: get_snx
  struct_name: Task
  comment: |-
    Obtains the snx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsnx>
- name: get_snx_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the snx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsnxslice>
- name: get_sol_sta
  struct_name: Task
  comment: |-
    Obtains the solution status.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    # Returns

    - `solutionsta` Solution status.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolsta>
- name: get_solution
  struct_name: Task
  comment: |-
    Obtains the complete solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `problemsta_` Problem status.

    See [Prosta]
    - `solutionsta_` Solution status.

    See [Solsta]
    - `skc_` Status keys for the constraints.

    See [Stakey]
    - `skx_` Status keys for the variables.

    See [Stakey]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]
    - `xc_` Primal constraint solution.
    - `xx_` Primal variable solution.
    - `y_` Vector of dual variables corresponding to the constraints.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolution>
- name: get_solution_info
  struct_name: Task
  comment: |-
    Obtains information about of a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `pobj_` The primal objective value.
    - `pviolcon_` Maximal primal bound violation for a xc variable.
    - `pviolvar_` Maximal primal bound violation for a xx variable.
    - `pviolbarvar_` Maximal primal bound violation for a barx variable.
    - `pviolcone_` Maximal primal violation of the solution with respect to the conic constraints.
    - `pviolitg_` Maximal violation in the integer constraints.
    - `dobj_` Dual objective value.
    - `dviolcon_` Maximal dual bound violation for a xc variable.
    - `dviolvar_` Maximal dual bound violation for a xx variable.
    - `dviolbarvar_` Maximal dual bound violation for a bars variable.
    - `dviolcone_` Maximum violation of the dual solution in the dual conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolutioninfo>
- name: get_solution_info_new
  struct_name: Task
  comment: |-
    Obtains information about of a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `pobj_` The primal objective value.
    - `pviolcon_` Maximal primal bound violation for a xc variable.
    - `pviolvar_` Maximal primal bound violation for a xx variable.
    - `pviolbarvar_` Maximal primal bound violation for a barx variable.
    - `pviolcone_` Maximal primal violation of the solution with respect to the conic constraints.
    - `pviolacc_` Maximal primal violation of the solution with respect to the affine conic constraints.
    - `pvioldjc_` Maximal primal violation of the solution with respect to the disjunctive constraints.
    - `pviolitg_` Maximal violation in the integer constraints.
    - `dobj_` Dual objective value.
    - `dviolcon_` Maximal dual bound violation for a xc variable.
    - `dviolvar_` Maximal dual bound violation for a xx variable.
    - `dviolbarvar_` Maximal dual bound violation for a bars variable.
    - `dviolcone_` Maximum violation of the dual solution in the dual conic constraints.
    - `dviolacc_` Maximum violation of the dual solution in the dual affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolutioninfonew>
- name: get_solution_new
  struct_name: Task
  comment: |-
    Obtains the complete solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `problemsta_` Problem status.

    See [Prosta]
    - `solutionsta_` Solution status.

    See [Solsta]
    - `skc_` Status keys for the constraints.

    See [Stakey]
    - `skx_` Status keys for the variables.

    See [Stakey]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]
    - `xc_` Primal constraint solution.
    - `xx_` Primal variable solution.
    - `y_` Vector of dual variables corresponding to the constraints.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.
    - `doty_` Dual variables corresponding to affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolutionnew>
- name: get_solution_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `solitem_` Which part of the solution is required.

    See [Solitem]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `values_` The values of the requested solution elements.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsolutionslice>
- name: get_sparse_sym_mat
  struct_name: Task
  comment: |-
    Gets a single symmetric matrix from the matrix store.

    # Arguments

    - `idx_` Index of the matrix to retrieve.
    - `subi_` Row subscripts of the matrix non-zero elements.
    - `subj_` Column subscripts of the matrix non-zero elements.
    - `valij_` Coefficients of the matrix non-zero elements.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsparsesymmat>
- name: get_str_param
  struct_name: Task
  comment: |-
    Obtains the value of a string parameter.

    # Arguments

    - `param_` Which parameter.

    See [Sparam]
    - `len_` The length of the parameter value.

    # Returns

    - `parvalue` If this is not a null pointer, the parameter value is stored here.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getstrparam>
- name: get_str_param_len
  struct_name: Task
  comment: |-
    Obtains the length of a string parameter.

    # Arguments

    - `param_` Which parameter.

    See [Sparam]

    # Returns

    - `len` The length of the parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getstrparamlen>
- name: get_suc
  struct_name: Task
  comment: |-
    Obtains the suc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsuc>
- name: get_suc_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the suc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsucslice>
- name: get_sux
  struct_name: Task
  comment: |-
    Obtains the sux vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsux>
- name: get_sux_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the sux vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsuxslice>
- name: get_symb_con
  struct_name: Task
  comment: |-
    Obtains a cone type string identifier.

    # Arguments

    - `i_` Index.
    - `value_` The corresponding value.

    # Returns

    - `name` Name of the i'th symbolic constant.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsymbcon>
- name: get_sym_mat_info
  struct_name: Task
  comment: |-
    Obtains information about a matrix from the symmetric matrix storage.

    # Arguments

    - `idx_` Index of the matrix for which information is requested.
    - `dim_` Returns the dimension of the requested matrix.
    - `nz_` Returns the number of non-zeros in the requested matrix.
    - `mattype_` Returns the type of the requested matrix.

    See [Symmattype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getsymmatinfo>
- name: get_task_name
  struct_name: Task
  comment: |-
    Obtains the task name.

    # Returns

    - `taskname` Returns the task name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gettaskname>
- name: get_task_name_len
  struct_name: Task
  comment: |-
    Obtains the length the task name.

    # Returns

    - `len` Returns the length of the task name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gettasknamelen>
- name: get_var_bound
  struct_name: Task
  comment: |-
    Obtains bound information for one variable.

    # Arguments

    - `i_` Index of the variable for which the bound information should be obtained.
    - `bk_` Bound keys.

    See [Boundkey]
    - `bl_` Values for lower bounds.
    - `bu_` Values for upper bounds.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarbound>
- name: get_var_bound_slice
  struct_name: Task
  comment: |-
    Obtains bounds information for a slice of the variables.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bk_` Bound keys.

    See [Boundkey]
    - `bl_` Values for lower bounds.
    - `bu_` Values for upper bounds.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarboundslice>
- name: get_var_name
  struct_name: Task
  comment: |-
    Obtains the name of a variable.

    # Arguments

    - `j_` Index of a variable.

    # Returns

    - `name` Returns the required name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarname>
- name: get_var_name_index
  struct_name: Task
  comment: |-
    Checks whether the name has been assigned to any variable.

    # Arguments

    - `somename_` The name which should be checked.
    - `asgn_` Is non-zero if the name somename is assigned to a variable.

    # Returns

    - `index` If the name somename is assigned to a variable, then return the index of the variable.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarnameindex>
- name: get_var_name_len
  struct_name: Task
  comment: |-
    Obtains the length of the name of a variable.

    # Arguments

    - `i_` Index of a variable.

    # Returns

    - `len` Returns the length of the indicated name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvarnamelen>
- name: get_var_type
  struct_name: Task
  comment: |-
    Gets the variable type of one variable.

    # Arguments

    - `j_` Index of the variable.

    # Returns

    - `vartype` Variable type of variable index j.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvartype>
- name: get_var_type_list
  struct_name: Task
  comment: |-
    Obtains the variable type for one or more variables.

    # Arguments

    - `subj_` A list of variable indexes.
    - `vartype_` Returns the variables types corresponding the variable indexes requested.

    See [Variabletype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getvartypelist>
- name: get_xc
  struct_name: Task
  comment: |-
    Obtains the xc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `xc_` Primal constraint solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getxc>
- name: get_xc_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the xc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `xc_` Primal constraint solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getxcslice>
- name: get_xx
  struct_name: Task
  comment: |-
    Obtains the xx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `xx_` Primal variable solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getxx>
- name: get_xx_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the xx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `xx_` Primal variable solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getxxslice>
- name: get_y
  struct_name: Task
  comment: |-
    Obtains the y vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `y_` Vector of dual variables corresponding to the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.gety>
- name: get_y_slice
  struct_name: Task
  comment: |-
    Obtains a slice of the y vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `y_` Vector of dual variables corresponding to the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.getyslice>
- name: infeasibility_report
  struct_name: Task
  comment: |-
    Prints the infeasibility report to an output stream.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.infeasibilityreport>
- name: init_basis_solve
  struct_name: Task
  comment: |-
    Prepare a task for basis solver.

    # Arguments

    - `basis_` The array of basis indexes to use.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.initbasissolve>
- name: input_data
  struct_name: Task
  comment: |-
    Input the linear part of an optimization task in one function call.

    # Arguments

    - `maxnumcon_` Number of preallocated constraints in the optimization task.
    - `maxnumvar_` Number of preallocated variables in the optimization task.
    - `c_` Linear terms of the objective as a dense vector. The length is the number of variables.
    - `cfix_` Fixed term in the objective.
    - `aptrb_` Row or column start pointers.
    - `aptre_` Row or column end pointers.
    - `asub_` Coefficient subscripts.
    - `aval_` Coefficient values.
    - `bkc_` Bound keys for the constraints.

    See [Boundkey]
    - `blc_` Lower bounds for the constraints.
    - `buc_` Upper bounds for the constraints.
    - `bkx_` Bound keys for the variables.

    See [Boundkey]
    - `blx_` Lower bounds for the variables.
    - `bux_` Upper bounds for the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.inputdata64>
- name: is_dou_par_name
  struct_name: Task
  comment: |-
    Checks a double parameter name.

    # Arguments

    - `parname_` Parameter name.
    - `param_` Returns the parameter corresponding to the name, if one exists.

    See [Dparam]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.isdouparname>
- name: is_int_par_name
  struct_name: Task
  comment: |-
    Checks an integer parameter name.

    # Arguments

    - `parname_` Parameter name.
    - `param_` Returns the parameter corresponding to the name, if one exists.

    See [Iparam]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.isintparname>
- name: is_str_par_name
  struct_name: Task
  comment: |-
    Checks a string parameter name.

    # Arguments

    - `parname_` Parameter name.
    - `param_` Returns the parameter corresponding to the name, if one exists.

    See [Sparam]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.isstrparname>
- name: link_file_to_stream
  struct_name: Task
  comment: |-
    Directs all output from a task stream to a file.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `filename_` A valid file name.
    - `append_` If this argument is 0 the output file will be overwritten, otherwise it will be appended to.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.linkfiletotaskstream>
- name: one_solution_summary
  struct_name: Task
  comment: |-
    Prints a short summary of a specified solution.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]
    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.onesolutionsummary>
- name: optimize_rmt
  struct_name: Task
  comment: |-
    Offload the optimization task to a solver server and wait for the solution.

    # Arguments

    - `address_` Address of the OptServer.
    - `accesstoken_` Access token.
    - `trmcode_` Is either OK or a termination response code.

    See [Rescode]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.optimizermt>
- name: optimizer_summary
  struct_name: Task
  comment: |-
    Prints a short summary with optimizer statistics from last optimization.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.optimizersummary>
- name: optimize
  struct_name: Task
  comment: |-
    Optimizes the problem.

    # Returns

    - `trmcode` Is either OK or a termination response code.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.optimizetrm>
- name: primal_repair
  struct_name: Task
  comment: |-
    Repairs a primal infeasible optimization problem by adjusting the bounds on the constraints and variables.

    # Arguments

    - `wlc_` Weights associated with relaxing lower bounds on the constraints.
    - `wuc_` Weights associated with relaxing the upper bound on the constraints.
    - `wlx_` Weights associated with relaxing the lower bounds of the variables.
    - `wux_` Weights associated with relaxing the upper bounds of variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.primalrepair>
- name: primal_sensitivity
  struct_name: Task
  comment: |-
    Perform sensitivity analysis on bounds.

    # Arguments

    - `subi_` Indexes of constraints to analyze.
    - `marki_` Mark which constraint bounds to analyze.

    See [Mark]
    - `subj_` Indexes of variables to analyze.
    - `markj_` Mark which variable bounds to analyze.

    See [Mark]
    - `leftpricei_` Left shadow price for constraints.
    - `rightpricei_` Right shadow price for constraints.
    - `leftrangei_` Left range for constraints.
    - `rightrangei_` Right range for constraints.
    - `leftpricej_` Left shadow price for variables.
    - `rightpricej_` Right shadow price for variables.
    - `leftrangej_` Left range for variables.
    - `rightrangej_` Right range for variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.primalsensitivity>
- name: print_param
  struct_name: Task
  comment: |-
    Prints the current parameter settings.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.printparam>
- name: put_acc
  struct_name: Task
  comment: |-
    Puts an affine conic constraint.

    # Arguments

    - `accidx_` Affine conic constraint index.
    - `domidx_` Domain index.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacc>
- name: put_acc_b
  struct_name: Task
  comment: |-
    Puts the constant vector b in an affine conic constraint.

    # Arguments

    - `accidx_` Affine conic constraint index.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaccb>
- name: put_acc_b_j
  struct_name: Task
  comment: |-
    Sets one element in the b vector of an affine conic constraint.

    # Arguments

    - `accidx_` Affine conic constraint index.
    - `j_` The index of an element in b to change.
    - `bj_` The new value of b\[j\].

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaccbj>
- name: put_acc_dot_y
  struct_name: Task
  comment: |-
    Puts the doty vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `accidx_` The index of the affine conic constraint.
    - `doty_` The dual values for this affine conic constraint. The array should have length equal to the dimension of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaccdoty>
- name: put_acc_list
  struct_name: Task
  comment: |-
    Puts a number of affine conic constraints.

    # Arguments

    - `accidxs_` Affine conic constraint indices.
    - `domidxs_` Domain indices.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, can be NULL.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacclist>
- name: put_acc_name
  struct_name: Task
  comment: |-
    Sets the name of an affine conic constraint.

    # Arguments

    - `accidx_` Index of the affine conic constraint.
    - `name_` The name of the affine conic constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaccname>
- name: put_a_col
  struct_name: Task
  comment: |-
    Replaces all elements in one column of the linear constraint matrix.

    # Arguments

    - `j_` Column index.
    - `subj_` Row indexes of non-zero values in column.
    - `valj_` New non-zero values of column.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacol>
- name: put_a_col_list
  struct_name: Task
  comment: |-
    Replaces all elements in several columns the linear constraint matrix.

    # Arguments

    - `sub_` Indexes of columns that should be replaced.
    - `ptrb_` Array of pointers to the first element in the columns.
    - `ptre_` Array of pointers to the last element plus one in the columns.
    - `asub_` Row indexes
    - `aval_` Coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacollist64>
- name: put_a_col_slice
  struct_name: Task
  comment: |-
    Replaces all elements in a sequence of columns the linear constraint matrix.

    # Arguments

    - `first_` First column in the slice.
    - `last_` Last column plus one in the slice.
    - `ptrb_` Array of pointers to the first element in the columns.
    - `ptre_` Array of pointers to the last element plus one in the columns.
    - `asub_` Row indexes
    - `aval_` Coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putacolslice64>
- name: put_afe_barf_block_triplet
  struct_name: Task
  comment: |-
    Inputs barF in block triplet form.

    # Arguments

    - `afeidx_` Constraint index.
    - `barvaridx_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valkl_` The numerical value associated with each block triplet.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafebarfblocktriplet>
- name: put_afe_barf_entry
  struct_name: Task
  comment: |-
    Inputs one entry in barF.

    # Arguments

    - `afeidx_` Row index of barF.
    - `barvaridx_` Semidefinite variable index.
    - `termidx_` Element indices in matrix storage.
    - `termweight_` Weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafebarfentry>
- name: put_afe_barf_entry_list
  struct_name: Task
  comment: |-
    Inputs a list of entries in barF.

    # Arguments

    - `afeidx_` Row indexes of barF.
    - `barvaridx_` Semidefinite variable indexes.
    - `numterm_` Number of terms in the weighted sums.
    - `ptrterm_` Pointer to the terms forming each entry.
    - `termidx_` Concatenated element indexes in matrix storage.
    - `termweight_` Concatenated weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafebarfentrylist>
- name: put_afe_barf_row
  struct_name: Task
  comment: |-
    Inputs a row of barF.

    # Arguments

    - `afeidx_` Row index of barF.
    - `barvaridx_` Semidefinite variable indexes.
    - `numterm_` Number of terms in the weighted sums.
    - `ptrterm_` Pointer to the terms forming each entry.
    - `termidx_` Concatenated element indexes in matrix storage.
    - `termweight_` Concatenated weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafebarfrow>
- name: put_afe_f_col
  struct_name: Task
  comment: |-
    Replaces all elements in one column of the F matrix in the affine expressions.

    # Arguments

    - `varidx_` Column index.
    - `afeidx_` Row indexes of non-zero values in the column.
    - `val_` New non-zero values in the column.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefcol>
- name: put_afe_f_entry
  struct_name: Task
  comment: |-
    Replaces one entry in F.

    # Arguments

    - `afeidx_` Row index in F.
    - `varidx_` Column index in F.
    - `value_` Value of the entry.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefentry>
- name: put_afe_f_entry_list
  struct_name: Task
  comment: |-
    Replaces a list of entries in F.

    # Arguments

    - `afeidx_` Row indices in F.
    - `varidx_` Column indices in F.
    - `val_` Values of the entries in F.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefentrylist>
- name: put_afe_f_row
  struct_name: Task
  comment: |-
    Replaces all elements in one row of the F matrix in the affine expressions.

    # Arguments

    - `afeidx_` Row index.
    - `varidx_` Column indexes of non-zero values in the row.
    - `val_` New non-zero values in the row.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefrow>
- name: put_afe_f_row_list
  struct_name: Task
  comment: |-
    Replaces all elements in a number of rows of the F matrix in the affine expressions.

    # Arguments

    - `afeidx_` Row indices.
    - `numnzrow_` Number of non-zeros in each row.
    - `ptrrow_` Pointer to the first nonzero in each row.
    - `varidx_` Column indexes of non-zero values.
    - `val_` New non-zero values in the rows.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafefrowlist>
- name: put_afe_g
  struct_name: Task
  comment: |-
    Replaces one element in the g vector in the affine expressions.

    # Arguments

    - `afeidx_` Row index.
    - `g_` New value for the element of g.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafeg>
- name: put_afe_g_list
  struct_name: Task
  comment: |-
    Replaces a list of elements in the g vector in the affine expressions.

    # Arguments

    - `afeidx_` Indices of entries in g.
    - `g_` New values for the elements of g.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafeglist>
- name: put_afe_g_slice
  struct_name: Task
  comment: |-
    Modifies a slice of the vector g.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slice_` The slice of g as a dense vector.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putafegslice>
- name: put_aij
  struct_name: Task
  comment: |-
    Changes a single value in the linear coefficient matrix.

    # Arguments

    - `i_` Constraint (row) index.
    - `j_` Variable (column) index.
    - `aij_` New coefficient.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaij>
- name: put_aij_list
  struct_name: Task
  comment: |-
    Changes one or more coefficients in the linear constraint matrix.

    # Arguments

    - `subi_` Constraint (row) indices.
    - `subj_` Variable (column) indices.
    - `valij_` New coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putaijlist64>
- name: put_a_row
  struct_name: Task
  comment: |-
    Replaces all elements in one row of the linear constraint matrix.

    # Arguments

    - `i_` Row index.
    - `subi_` Column indexes of non-zero values in row.
    - `vali_` New non-zero values of row.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putarow>
- name: put_a_row_list
  struct_name: Task
  comment: |-
    Replaces all elements in several rows of the linear constraint matrix.

    # Arguments

    - `sub_` Indexes of rows or columns that should be replaced.
    - `ptrb_` Array of pointers to the first element in the rows.
    - `ptre_` Array of pointers to the last element plus one in the rows.
    - `asub_` Variable indexes.
    - `aval_` Coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putarowlist64>
- name: put_a_row_slice
  struct_name: Task
  comment: |-
    Replaces all elements in several rows the linear constraint matrix.

    # Arguments

    - `first_` First row in the slice.
    - `last_` Last row plus one in the slice.
    - `ptrb_` Array of pointers to the first element in the rows.
    - `ptre_` Array of pointers to the last element plus one in the rows.
    - `asub_` Column indexes of new elements.
    - `aval_` Coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putarowslice64>
- name: put_a_truncate_tol
  struct_name: Task
  comment: |-
    Truncates all elements in A below a certain tolerance to zero.

    # Arguments

    - `tolzero_` Truncation tolerance.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putatruncatetol>
- name: put_bara_block_triplet
  struct_name: Task
  comment: |-
    Inputs barA in block triplet form.

    # Arguments

    - `subi_` Constraint index.
    - `subj_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valijkl_` The numerical value associated with each block triplet.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarablocktriplet>
- name: put_bara_ij
  struct_name: Task
  comment: |-
    Inputs an element of barA.

    # Arguments

    - `i_` Row index of barA.
    - `j_` Column index of barA.
    - `sub_` Element indexes in matrix storage.
    - `weights_` Weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbaraij>
- name: put_bara_ij_list
  struct_name: Task
  comment: |-
    Inputs list of elements of barA.

    # Arguments

    - `subi_` Row index of barA.
    - `subj_` Column index of barA.
    - `alphaptrb_` Start entries for terms in the weighted sum.
    - `alphaptre_` End entries for terms in the weighted sum.
    - `matidx_` Element indexes in matrix storage.
    - `weights_` Weights in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbaraijlist>
- name: put_bara_row_list
  struct_name: Task
  comment: |-
    Replace a set of rows of barA

    # Arguments

    - `subi_` Row indexes of barA.
    - `ptrb_` Start of rows in barA.
    - `ptre_` End of rows in barA.
    - `subj_` Column index of barA.
    - `nummat_` Number of entries in weighted sum of matrixes.
    - `matidx_` Matrix indexes for weighted sum of matrixes.
    - `weights_` Weights for weighted sum of matrixes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbararowlist>
- name: put_barc_block_triplet
  struct_name: Task
  comment: |-
    Inputs barC in block triplet form.

    # Arguments

    - `subj_` Symmetric matrix variable index.
    - `subk_` Block row index.
    - `subl_` Block column index.
    - `valjkl_` The numerical value associated with each block triplet.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarcblocktriplet>
- name: put_barc_j
  struct_name: Task
  comment: |-
    Changes one element in barc.

    # Arguments

    - `j_` Index of the element in barc` that should be changed.
    - `sub_` sub is list of indexes of those symmetric matrices appearing in sum.
    - `weights_` The weights of the terms in the weighted sum.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarcj>
- name: put_bars_j
  struct_name: Task
  comment: |-
    Sets the dual solution for a semidefinite variable.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `j_` Index of the semidefinite variable.
    - `barsj_` Value of the j'th variable of barx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarsj>
- name: put_barvar_name
  struct_name: Task
  comment: |-
    Sets the name of a semidefinite variable.

    # Arguments

    - `j_` Index of the variable.
    - `name_` The variable name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarvarname>
- name: put_barx_j
  struct_name: Task
  comment: |-
    Sets the primal solution for a semidefinite variable.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `j_` Index of the semidefinite variable.
    - `barxj_` Value of the j'th variable of barx.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putbarxj>
- name: put_cfix
  struct_name: Task
  comment: |-
    Replaces the fixed term in the objective.

    # Arguments

    - `cfix_` Fixed term in the objective.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putcfix>
- name: put_c_j
  struct_name: Task
  comment: |-
    Modifies one linear coefficient in the objective.

    # Arguments

    - `j_` Index of the variable whose objective coefficient should be changed.
    - `cj_` New coefficient value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putcj>
- name: put_c_list
  struct_name: Task
  comment: |-
    Modifies a part of the linear objective coefficients.

    # Arguments

    - `subj_` Indices of variables for which objective coefficients should be changed.
    - `val_` New numerical values for the objective coefficients that should be modified.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putclist>
- name: put_con_bound
  struct_name: Task
  comment: |-
    Changes the bound for one constraint.

    # Arguments

    - `i_` Index of the constraint.
    - `bkc_` New bound key.

    See [Boundkey]
    - `blc_` New lower bound.
    - `buc_` New upper bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconbound>
- name: put_con_bound_list
  struct_name: Task
  comment: |-
    Changes the bounds of a list of constraints.

    # Arguments

    - `sub_` List of constraint indexes.
    - `bkc_` Bound keys for the constraints.

    See [Boundkey]
    - `blc_` Lower bounds for the constraints.
    - `buc_` Upper bounds for the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconboundlist>
- name: put_con_bound_list_const
  struct_name: Task
  comment: |-
    Changes the bounds of a list of constraints.

    # Arguments

    - `sub_` List of constraint indexes.
    - `bkc_` New bound key for all constraints in the list.

    See [Boundkey]
    - `blc_` New lower bound for all constraints in the list.
    - `buc_` New upper bound for all constraints in the list.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconboundlistconst>
- name: put_con_bound_slice
  struct_name: Task
  comment: |-
    Changes the bounds for a slice of the constraints.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bkc_` Bound keys for the constraints.

    See [Boundkey]
    - `blc_` Lower bounds for the constraints.
    - `buc_` Upper bounds for the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconboundslice>
- name: put_con_bound_slice_const
  struct_name: Task
  comment: |-
    Changes the bounds for a slice of the constraints.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bkc_` New bound key for all constraints in the slice.

    See [Boundkey]
    - `blc_` New lower bound for all constraints in the slice.
    - `buc_` New upper bound for all constraints in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconboundsliceconst>
- name: put_cone
  struct_name: Task
  comment: |-
    Replaces a conic constraint.

    # Arguments

    - `k_` Index of the cone.
    - `ct_` Specifies the type of the cone.

    See [Conetype]
    - `conepar_` For the power cone it denotes the exponent alpha. For other cone types it is unused and can be set to 0.
    - `submem_` Variable subscripts of the members in the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putcone>
- name: put_cone_name
  struct_name: Task
  comment: |-
    Sets the name of a cone.

    # Arguments

    - `j_` Index of the cone.
    - `name_` The name of the cone.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconename>
- name: put_con_name
  struct_name: Task
  comment: |-
    Sets the name of a constraint.

    # Arguments

    - `i_` Index of the constraint.
    - `name_` The name of the constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconname>
- name: put_con_solution_i
  struct_name: Task
  comment: |-
    Sets the primal and dual solution information for a single constraint.

    # Arguments

    - `i_` Index of the constraint.
    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sk_` Status key of the constraint.

    See [Stakey]
    - `x_` Primal solution value of the constraint.
    - `sl_` Solution value of the dual variable associated with the lower bound.
    - `su_` Solution value of the dual variable associated with the upper bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putconsolutioni>
- name: put_c_slice
  struct_name: Task
  comment: |-
    Modifies a slice of the linear objective coefficients.

    # Arguments

    - `first_` First element in the slice of c.
    - `last_` Last element plus 1 of the slice in c to be changed.
    - `slice_` New numerical values for the objective coefficients that should be modified.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putcslice>
- name: put_djc
  struct_name: Task
  comment: |-
    Inputs a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `domidxlist_` List of domain indexes.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions.
    - `termsizelist_` List of term sizes.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdjc>
- name: put_djc_name
  struct_name: Task
  comment: |-
    Sets the name of a disjunctive constraint.

    # Arguments

    - `djcidx_` Index of the disjunctive constraint.
    - `name_` The name of the disjunctive constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdjcname>
- name: put_djc_slice
  struct_name: Task
  comment: |-
    Inputs a slice of disjunctive constraints.

    # Arguments

    - `idxfirst_` Index of the first disjunctive constraint in the slice.
    - `idxlast_` Index of the last disjunctive constraint in the slice plus 1.
    - `domidxlist_` List of domain indexes.
    - `afeidxlist_` List of affine expression indexes.
    - `b_` The vector of constant terms added to affine expressions. Optional, may be NULL.
    - `termsizelist_` List of term sizes.
    - `termsindjc_` Number of terms in each of the disjunctive constraints in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdjcslice>
- name: put_domain_name
  struct_name: Task
  comment: |-
    Sets the name of a domain.

    # Arguments

    - `domidx_` Index of the domain.
    - `name_` The name of the domain.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdomainname>
- name: put_dou_param
  struct_name: Task
  comment: |-
    Sets a double parameter.

    # Arguments

    - `param_` Which parameter.

    See [Dparam]
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putdouparam>
- name: put_int_param
  struct_name: Task
  comment: |-
    Sets an integer parameter.

    # Arguments

    - `param_` Which parameter.

    See [Iparam]
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putintparam>
- name: put_max_num_acc
  struct_name: Task
  comment: |-
    Sets the number of preallocated affine conic constraints.

    # Arguments

    - `maxnumacc_` Number of preallocated affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumacc>
- name: put_max_num_afe
  struct_name: Task
  comment: |-
    Sets the number of preallocated affine expressions in the optimization task.

    # Arguments

    - `maxnumafe_` Number of preallocated affine expressions.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumafe>
- name: put_max_num_a_nz
  struct_name: Task
  comment: |-
    Sets the number of preallocated non-zero entries in the linear coefficient matrix.

    # Arguments

    - `maxnumanz_` New size of the storage reserved for storing the linear coefficient matrix.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumanz>
- name: put_max_num_barvar
  struct_name: Task
  comment: |-
    Sets the number of preallocated symmetric matrix variables.

    # Arguments

    - `maxnumbarvar_` Number of preallocated symmetric matrix variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumbarvar>
- name: put_max_num_con
  struct_name: Task
  comment: |-
    Sets the number of preallocated constraints in the optimization task.

    # Arguments

    - `maxnumcon_` Number of preallocated constraints in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumcon>
- name: put_max_num_cone
  struct_name: Task
  comment: |-
    Sets the number of preallocated conic constraints in the optimization task.

    # Arguments

    - `maxnumcone_` Number of preallocated conic constraints in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumcone>
- name: put_max_num_djc
  struct_name: Task
  comment: |-
    Sets the number of preallocated disjunctive constraints.

    # Arguments

    - `maxnumdjc_` Number of preallocated disjunctive constraints in the task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumdjc>
- name: put_max_num_domain
  struct_name: Task
  comment: |-
    Sets the number of preallocated domains in the optimization task.

    # Arguments

    - `maxnumdomain_` Number of preallocated domains.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumdomain>
- name: put_max_num_q_nz
  struct_name: Task
  comment: |-
    Sets the number of preallocated non-zero entries in quadratic terms.

    # Arguments

    - `maxnumqnz_` Number of non-zero elements preallocated in quadratic coefficient matrices.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumqnz>
- name: put_max_num_var
  struct_name: Task
  comment: |-
    Sets the number of preallocated variables in the optimization task.

    # Arguments

    - `maxnumvar_` Number of preallocated variables in the optimization task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putmaxnumvar>
- name: put_na_dou_param
  struct_name: Task
  comment: |-
    Sets a double parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putnadouparam>
- name: put_na_int_param
  struct_name: Task
  comment: |-
    Sets an integer parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putnaintparam>
- name: put_na_str_param
  struct_name: Task
  comment: |-
    Sets a string parameter.

    # Arguments

    - `paramname_` Name of a parameter.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putnastrparam>
- name: put_obj_name
  struct_name: Task
  comment: |-
    Assigns a new name to the objective.

    # Arguments

    - `objname_` Name of the objective.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putobjname>
- name: put_obj_sense
  struct_name: Task
  comment: |-
    Sets the objective sense.

    # Arguments

    - `sense_` The objective sense of the task

    See [Objsense]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putobjsense>
- name: put_optserver_host
  struct_name: Task
  comment: |-
    Specify an OptServer for remote calls.

    # Arguments

    - `host_` A URL specifying the optimization server to be used.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putoptserverhost>
- name: put_param
  struct_name: Task
  comment: |-
    Modifies the value of parameter.

    # Arguments

    - `parname_` Parameter name.
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putparam>
- name: put_q_con
  struct_name: Task
  comment: |-
    Replaces all quadratic terms in constraints.

    # Arguments

    - `qcsubk_` Constraint subscripts for quadratic coefficients.
    - `qcsubi_` Row subscripts for quadratic constraint matrix.
    - `qcsubj_` Column subscripts for quadratic constraint matrix.
    - `qcval_` Quadratic constraint coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putqcon>
- name: put_q_con_k
  struct_name: Task
  comment: |-
    Replaces all quadratic terms in a single constraint.

    # Arguments

    - `k_` The constraint in which the new quadratic elements are inserted.
    - `qcsubi_` Row subscripts for quadratic constraint matrix.
    - `qcsubj_` Column subscripts for quadratic constraint matrix.
    - `qcval_` Quadratic constraint coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putqconk>
- name: put_q_obj
  struct_name: Task
  comment: |-
    Replaces all quadratic terms in the objective.

    # Arguments

    - `qosubi_` Row subscripts for quadratic objective coefficients.
    - `qosubj_` Column subscripts for quadratic objective coefficients.
    - `qoval_` Quadratic objective coefficient values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putqobj>
- name: put_q_obj_i_j
  struct_name: Task
  comment: |-
    Replaces one coefficient in the quadratic term in the objective.

    # Arguments

    - `i_` Row index for the coefficient to be replaced.
    - `j_` Column index for the coefficient to be replaced.
    - `qoij_` The new coefficient value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putqobjij>
- name: put_skc
  struct_name: Task
  comment: |-
    Sets the status keys for the constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skc_` Status keys for the constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putskc>
- name: put_skc_slice
  struct_name: Task
  comment: |-
    Sets the status keys for a slice of the constraints.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `skc_` Status keys for the constraints.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putskcslice>
- name: put_skx
  struct_name: Task
  comment: |-
    Sets the status keys for the scalar variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skx_` Status keys for the variables.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putskx>
- name: put_skx_slice
  struct_name: Task
  comment: |-
    Sets the status keys for a slice of the variables.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `skx_` Status keys for the variables.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putskxslice>
- name: put_slc
  struct_name: Task
  comment: |-
    Sets the slc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putslc>
- name: put_slc_slice
  struct_name: Task
  comment: |-
    Sets a slice of the slc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putslcslice>
- name: put_slx
  struct_name: Task
  comment: |-
    Sets the slx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `slx_` Dual variables corresponding to the lower bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putslx>
- name: put_slx_slice
  struct_name: Task
  comment: |-
    Sets a slice of the slx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putslxslice>
- name: put_snx
  struct_name: Task
  comment: |-
    Sets the snx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsnx>
- name: put_snx_slice
  struct_name: Task
  comment: |-
    Sets a slice of the snx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsnxslice>
- name: put_solution
  struct_name: Task
  comment: |-
    Inserts a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skc_` Status keys for the constraints.

    See [Stakey]
    - `skx_` Status keys for the variables.

    See [Stakey]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]
    - `xc_` Primal constraint solution.
    - `xx_` Primal variable solution.
    - `y_` Vector of dual variables corresponding to the constraints.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsolution>
- name: put_solution_new
  struct_name: Task
  comment: |-
    Inserts a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `skc_` Status keys for the constraints.

    See [Stakey]
    - `skx_` Status keys for the variables.

    See [Stakey]
    - `skn_` Status keys for the conic constraints.

    See [Stakey]
    - `xc_` Primal constraint solution.
    - `xx_` Primal variable solution.
    - `y_` Vector of dual variables corresponding to the constraints.
    - `slc_` Dual variables corresponding to the lower bounds on the constraints.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.
    - `slx_` Dual variables corresponding to the lower bounds on the variables.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.
    - `snx_` Dual variables corresponding to the conic constraints on the variables.
    - `doty_` Dual variables corresponding to affine conic constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsolutionnew>
- name: put_solution_y_i
  struct_name: Task
  comment: |-
    Inputs the dual variable of a solution.

    # Arguments

    - `i_` Index of the dual variable.
    - `whichsol_` Selects a solution.

    See [Soltype]
    - `y_` Solution value of the dual variable.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsolutionyi>
- name: put_str_param
  struct_name: Task
  comment: |-
    Sets a string parameter.

    # Arguments

    - `param_` Which parameter.

    See [Sparam]
    - `parvalue_` Parameter value.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putstrparam>
- name: put_suc
  struct_name: Task
  comment: |-
    Sets the suc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsuc>
- name: put_suc_slice
  struct_name: Task
  comment: |-
    Sets a slice of the suc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `suc_` Dual variables corresponding to the upper bounds on the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsucslice>
- name: put_sux
  struct_name: Task
  comment: |-
    Sets the sux vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsux>
- name: put_sux_slice
  struct_name: Task
  comment: |-
    Sets a slice of the sux vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `sux_` Dual variables corresponding to the upper bounds on the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putsuxslice>
- name: put_task_name
  struct_name: Task
  comment: |-
    Assigns a new name to the task.

    # Arguments

    - `taskname_` Name assigned to the task.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.puttaskname>
- name: put_var_bound
  struct_name: Task
  comment: |-
    Changes the bounds for one variable.

    # Arguments

    - `j_` Index of the variable.
    - `bkx_` New bound key.

    See [Boundkey]
    - `blx_` New lower bound.
    - `bux_` New upper bound.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarbound>
- name: put_var_bound_list
  struct_name: Task
  comment: |-
    Changes the bounds of a list of variables.

    # Arguments

    - `sub_` List of variable indexes.
    - `bkx_` Bound keys for the variables.

    See [Boundkey]
    - `blx_` Lower bounds for the variables.
    - `bux_` Upper bounds for the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarboundlist>
- name: put_var_bound_list_const
  struct_name: Task
  comment: |-
    Changes the bounds of a list of variables.

    # Arguments

    - `sub_` List of variable indexes.
    - `bkx_` New bound key for all variables in the list.

    See [Boundkey]
    - `blx_` New lower bound for all variables in the list.
    - `bux_` New upper bound for all variables in the list.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarboundlistconst>
- name: put_var_bound_slice
  struct_name: Task
  comment: |-
    Changes the bounds for a slice of the variables.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bkx_` Bound keys for the variables.

    See [Boundkey]
    - `blx_` Lower bounds for the variables.
    - `bux_` Upper bounds for the variables.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarboundslice>
- name: put_var_bound_slice_const
  struct_name: Task
  comment: |-
    Changes the bounds for a slice of the variables.

    # Arguments

    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `bkx_` New bound key for all variables in the slice.

    See [Boundkey]
    - `blx_` New lower bound for all variables in the slice.
    - `bux_` New upper bound for all variables in the slice.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarboundsliceconst>
- name: put_var_name
  struct_name: Task
  comment: |-
    Sets the name of a variable.

    # Arguments

    - `j_` Index of the variable.
    - `name_` The variable name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarname>
- name: put_var_solution_j
  struct_name: Task
  comment: |-
    Sets the primal and dual solution information for a single variable.

    # Arguments

    - `j_` Index of the variable.
    - `whichsol_` Selects a solution.

    See [Soltype]
    - `sk_` Status key of the variable.

    See [Stakey]
    - `x_` Primal solution value of the variable.
    - `sl_` Solution value of the dual variable associated with the lower bound.
    - `su_` Solution value of the dual variable associated with the upper bound.
    - `sn_` Solution value of the dual variable associated with the conic constraint.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvarsolutionj>
- name: put_var_type
  struct_name: Task
  comment: |-
    Sets the variable type of one variable.

    # Arguments

    - `j_` Index of the variable.
    - `vartype_` The new variable type.

    See [Variabletype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvartype>
- name: put_var_type_list
  struct_name: Task
  comment: |-
    Sets the variable type for one or more variables.

    # Arguments

    - `subj_` A list of variable indexes for which the variable type should be changed.
    - `vartype_` A list of variable types.

    See [Variabletype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putvartypelist>
- name: put_xc
  struct_name: Task
  comment: |-
    Sets the xc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `xc_` Primal constraint solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putxc>
- name: put_xc_slice
  struct_name: Task
  comment: |-
    Sets a slice of the xc vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `xc_` Primal constraint solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putxcslice>
- name: put_xx
  struct_name: Task
  comment: |-
    Sets the xx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `xx_` Primal variable solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putxx>
- name: put_xx_slice
  struct_name: Task
  comment: |-
    Sets a slice of the xx vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `xx_` Primal variable solution.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putxxslice>
- name: put_y
  struct_name: Task
  comment: |-
    Sets the y vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `y_` Vector of dual variables corresponding to the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.puty>
- name: put_y_slice
  struct_name: Task
  comment: |-
    Sets a slice of the y vector for a solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `first_` First index in the sequence.
    - `last_` Last index plus 1 in the sequence.
    - `y_` Vector of dual variables corresponding to the constraints.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.putyslice>
- name: read_b_solution
  struct_name: Task
  comment: |-
    Read a binary dump of the task solution and information items.

    # Arguments

    - `filename_` A valid file name.
    - `compress_` Data compression type.

    See [Compresstype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readbsolution>
- name: read_data
  struct_name: Task
  comment: |-
    Reads problem data from a file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readdataautoformat>
- name: read_data_format
  struct_name: Task
  comment: |-
    Reads problem data from a file.

    # Arguments

    - `filename_` A valid file name.
    - `format_` File data format.

    See [Dataformat]
    - `compress_` File compression type.

    See [Compresstype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readdataformat>
- name: read_json_sol
  struct_name: Task
  comment: |-
    Reads a solution from a JSOL file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readjsonsol>
- name: read_json_string
  struct_name: Task
  comment: |-
    Load task data from a string in JSON format.

    # Arguments

    - `data_` Problem data in text format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readjsonstring>
- name: read_lp_string
  struct_name: Task
  comment: |-
    Load task data from a string in LP format.

    # Arguments

    - `data_` Problem data in text format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readlpstring>
- name: read_opf_string
  struct_name: Task
  comment: |-
    Load task data from a string in OPF format.

    # Arguments

    - `data_` Problem data in text format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readopfstring>
- name: read_param_file
  struct_name: Task
  comment: |-
    Reads a parameter file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readparamfile>
- name: read_ptf_string
  struct_name: Task
  comment: |-
    Load task data from a string in PTF format.

    # Arguments

    - `data_` Problem data in text format.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readptfstring>
- name: read_solution
  struct_name: Task
  comment: |-
    Reads a solution from a file.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readsolution>
- name: read_solution_file
  struct_name: Task
  comment: |-
    Read solution file in format determined by the filename

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readsolutionfile>
- name: read_summary
  struct_name: Task
  comment: |-
    Prints information about last file read.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readsummary>
- name: read_task
  struct_name: Task
  comment: |-
    Load task data from a file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.readtask>
- name: remove_barvars
  struct_name: Task
  comment: |-
    Removes a number of symmetric matrices.

    # Arguments

    - `subset_` Indexes of symmetric matrices which should be removed.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.removebarvars>
- name: remove_cones
  struct_name: Task
  comment: |-
    Removes a number of conic constraints from the problem.

    # Arguments

    - `subset_` Indexes of cones which should be removed.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.removecones>
- name: remove_cons
  struct_name: Task
  comment: |-
    Removes a number of constraints.

    # Arguments

    - `subset_` Indexes of constraints which should be removed.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.removecons>
- name: remove_vars
  struct_name: Task
  comment: |-
    Removes a number of variables.

    # Arguments

    - `subset_` Indexes of variables which should be removed.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.removevars>
- name: resize_task
  struct_name: Task
  comment: |-
    Resizes an optimization task.

    # Arguments

    - `maxnumcon_` New maximum number of constraints.
    - `maxnumvar_` New maximum number of variables.
    - `maxnumcone_` New maximum number of cones.
    - `maxnumanz_` New maximum number of linear non-zero elements.
    - `maxnumqnz_` New maximum number of quadratic non-zeros elements.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.resizetask>
- name: sensitivity_report
  struct_name: Task
  comment: |-
    Creates a sensitivity report.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.sensitivityreport>
- name: set_defaults
  struct_name: Task
  comment: |-
    Resets all parameter values.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.setdefaults>
- name: solution_def
  struct_name: Task
  comment: |-
    Checks whether a solution is defined.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    # Returns

    - `isdef` Is non-zero if the requested solution is defined.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.solutiondef>
- name: solution_summary
  struct_name: Task
  comment: |-
    Prints a short summary of the current solutions.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.solutionsummary>
- name: solve_with_basis
  struct_name: Task
  comment: |-
    Solve a linear equation system involving a basis matrix.

    # Arguments

    - `transp_` Controls which problem formulation is solved.
    - `numnz_` Input (number of non-zeros in right-hand side).
    - `sub_` Input (indexes of non-zeros in right-hand side) and output (indexes of non-zeros in solution vector).
    - `val_` Input (right-hand side values) and output (solution vector values).

    # Returns

    - `numnzout` Output (number of non-zeros in solution vector).

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.solvewithbasis>
- name: str_to_cone_type
  struct_name: Task
  comment: |-
    Obtains a cone type code.

    # Arguments

    - `str_` String corresponding to the cone type code.
    - `conetype_` The cone type corresponding to str.

    See [Conetype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.strtoconetype>
- name: str_to_sk
  struct_name: Task
  comment: |-
    Obtains a status key.

    # Arguments

    - `str_` A status key abbreviation string.
    - `sk_` Status key corresponding to the string.

    See [Stakey]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.strtosk>
- name: toconic
  struct_name: Task
  comment: |-
    In-place reformulation of a QCQO to a conic quadratic problem.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.toconic>
- name: unlink_func_from_stream
  struct_name: Task
  comment: |-
    Disconnects a user-defined function from a task stream.

    # Arguments

    - `whichstream_` Index of the stream.

    See [Streamtype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.unlinkfuncfromtaskstream>
- name: update_solution_info
  struct_name: Task
  comment: |-
    Update the information items related to the solution.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.updatesolutioninfo>
- name: which_param
  struct_name: Task
  comment: |-
    Checks a parameter name.

    # Arguments

    - `parname_` Parameter name.
    - `partype_` Parameter type.

    See [Parametertype]
    - `param_` Which parameter.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.whichparam>
- name: write_b_solution
  struct_name: Task
  comment: |-
    Write a binary dump of the task solution and information items.

    # Arguments

    - `filename_` A valid file name.
    - `compress_` Data compression type.

    See [Compresstype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writebsolution>
- name: write_data
  struct_name: Task
  comment: |-
    Writes problem data to a file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writedata>
- name: write_json_sol
  struct_name: Task
  comment: |-
    Writes a solution to a JSON file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writejsonsol>
- name: write_param_file
  struct_name: Task
  comment: |-
    Writes all the parameters to a parameter file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writeparamfile>
- name: write_solution
  struct_name: Task
  comment: |-
    Write a solution to a file.

    # Arguments

    - `whichsol_` Selects a solution.

    See [Soltype]
    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writesolution>
- name: write_solution_file
  struct_name: Task
  comment: |-
    Write solution file in format determined by the filename

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writesolutionfile>
- name: write_stat
  struct_name: Task
  comment: |-
    Appends a record to the statistics file.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writestat>
- name: write_task
  struct_name: Task
  comment: |-
    Write a complete binary dump of the task data.

    # Arguments

    - `filename_` A valid file name.

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writetask>
- name: write_task_solver_result_file
  struct_name: Task
  comment: |-
    Internal

    # Arguments

    - `filename_` A valid file name.
    - `compress_` Data compression type.

    See [Compresstype]

    Full documentation: <https://docs.mosek.com/latest/capi/alphabetic-functionalities.html#mosek.env.writetasksolverresult_file>
